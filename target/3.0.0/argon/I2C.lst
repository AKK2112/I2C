
d:/Labs/I2C/target/3.0.0/argon/I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003984  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d79a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e564  000d79a4  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000224  2003e5cc  2003e5cc  0002e5cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7a0c  000d7a0c  00027a0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7a34  000d7a34  00027a34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e795d  00000000  00000000  00027a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b9fd  00000000  00000000  0020f395  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00040019  00000000  00000000  0022ad92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030e8  00000000  00000000  0026adab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009990  00000000  00000000  0026de93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000400d9  00000000  00000000  00277823  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004a9f1  00000000  00000000  002b78fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129171  00000000  00000000  003022ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008cfc  00000000  00000000  0042b460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fddf 	bl	d6bf0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fde7 	bl	d6c0c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e564 	.word	0x2003e564
   d4048:	000d79a4 	.word	0x000d79a4
   d404c:	2003e5cc 	.word	0x2003e5cc
   d4050:	2003e5cc 	.word	0x2003e5cc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f9d5 	bl	d640c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7970 	.word	0x000d7970
   d407c:	000d7994 	.word	0x000d7994

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81e 	b.w	d40c0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f847 	bl	d4118 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b97f 	b.w	d6390 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 be3f 	b.w	d5d14 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 be45 	b.w	d5d24 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f001 fd9a 	bl	d5bdc <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d593d 	.word	0x000d593d

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <setup>:
int red = D5;
int green = D6;
int blue = D7;


void setup() {
   d40c0:	b508      	push	{r3, lr}
  //identifies the led output pins
  pinMode(D5, OUTPUT);
   d40c2:	2101      	movs	r1, #1
   d40c4:	2005      	movs	r0, #5
   d40c6:	f002 fcfd 	bl	d6ac4 <pinMode>
  pinMode(D6, OUTPUT);
   d40ca:	2101      	movs	r1, #1
   d40cc:	2006      	movs	r0, #6
   d40ce:	f002 fcf9 	bl	d6ac4 <pinMode>
  pinMode(D7, OUTPUT);
   d40d2:	2101      	movs	r1, #1
   d40d4:	2007      	movs	r0, #7
   d40d6:	f002 fcf5 	bl	d6ac4 <pinMode>
  Serial.begin(9600);
   d40da:	f002 fa9d 	bl	d6618 <_Z16_fetch_usbserialv>
   d40de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40e2:	f002 fa8d 	bl	d6600 <_ZN9USBSerial5beginEl>
    display.setup();
   d40e6:	480a      	ldr	r0, [pc, #40]	; (d4110 <setup+0x50>)
   d40e8:	f000 fd62 	bl	d4bb0 <_ZN16OledWingAdafruit5setupEv>
    display.clearDisplay();
   d40ec:	4808      	ldr	r0, [pc, #32]	; (d4110 <setup+0x50>)
   d40ee:	f000 ff91 	bl	d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   d40f2:	4807      	ldr	r0, [pc, #28]	; (d4110 <setup+0x50>)
   d40f4:	f001 f9fa 	bl	d54ec <_ZN16Adafruit_SSD13067displayEv>
  sensor.begin(); //turns on the proximity sensor
   d40f8:	f002 fd3a 	bl	d6b70 <_Z19__fetch_global_Wirev>
   d40fc:	4601      	mov	r1, r0
   d40fe:	4805      	ldr	r0, [pc, #20]	; (d4114 <setup+0x54>)
   d4100:	f001 fbb8 	bl	d5874 <_ZN8VCNL40405beginER7TwoWire>
  Wire.begin(); //Join i2c bus
   d4104:	f002 fd34 	bl	d6b70 <_Z19__fetch_global_Wirev>
}
   d4108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin(); //Join i2c bus
   d410c:	f002 bb6e 	b.w	d67ec <_ZN7TwoWire5beginEv>
   d4110:	2003e5d0 	.word	0x2003e5d0
   d4114:	2003e640 	.word	0x2003e640

000d4118 <loop>:

void loop() {
   d4118:	b570      	push	{r4, r5, r6, lr}
  display.loop();  
   d411a:	4c5c      	ldr	r4, [pc, #368]	; (d428c <loop+0x174>)
void loop() {
   d411c:	b08a      	sub	sp, #40	; 0x28
  display.loop();  
   d411e:	4620      	mov	r0, r4
   d4120:	f000 fd6f 	bl	d4c02 <_ZN16OledWingAdafruit4loopEv>
//prints the value the sensor is getting to the serial monitor. 
  unsigned int proxValue = sensor.getProximity(); 
   d4124:	485a      	ldr	r0, [pc, #360]	; (d4290 <loop+0x178>)
   d4126:	f001 fab9 	bl	d569c <_ZN8VCNL404012getProximityEv>
   d412a:	4606      	mov	r6, r0
  Serial.print("Proximity Value: ");
   d412c:	f002 fa74 	bl	d6618 <_Z16_fetch_usbserialv>
   d4130:	4958      	ldr	r1, [pc, #352]	; (d4294 <loop+0x17c>)
   d4132:	f002 f86f 	bl	d6214 <_ZN5Print5printEPKc>
  Serial.print(proxValue);
   d4136:	f002 fa6f 	bl	d6618 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d413a:	220a      	movs	r2, #10
   d413c:	4631      	mov	r1, r6
   d413e:	f002 f886 	bl	d624e <_ZN5Print11printNumberEmh>
  Serial.println();
   d4142:	f002 fa69 	bl	d6618 <_Z16_fetch_usbserialv>
   d4146:	f002 f86c 	bl	d6222 <_ZN5Print7printlnEv>
  unsigned int ambientValue = sensor.getAmbient();
   d414a:	4851      	ldr	r0, [pc, #324]	; (d4290 <loop+0x178>)
   d414c:	f001 faa9 	bl	d56a2 <_ZN8VCNL404010getAmbientEv>
   d4150:	4605      	mov	r5, r0
  
  //when button A is pressed, it will aquire the current value from the proiximity sensor and print that on the OLED display
  if (display.pressedA()) {
   d4152:	4620      	mov	r0, r4
   d4154:	f000 fd6e 	bl	d4c34 <_ZN16OledWingAdafruit8pressedAEv>
   d4158:	b350      	cbz	r0, d41b0 <loop+0x98>
    display.clearDisplay();
   d415a:	4620      	mov	r0, r4
   d415c:	f000 ff5a 	bl	d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>

    display.setTextSize(3);
   d4160:	2103      	movs	r1, #3
   d4162:	4620      	mov	r0, r4
   d4164:	f000 fcd5 	bl	d4b12 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4168:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d416c:	2000      	movs	r0, #0
   d416e:	e9c4 0304 	strd	r0, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0,0);

    String output;
   d4172:	4949      	ldr	r1, [pc, #292]	; (d4298 <loop+0x180>)
   d4174:	a806      	add	r0, sp, #24
   d4176:	f001 ffac 	bl	d60d2 <_ZN6StringC1EPKc>
    uint16_t reading = sensor.getProximity();
   d417a:	4845      	ldr	r0, [pc, #276]	; (d4290 <loop+0x178>)
   d417c:	f001 fa8e 	bl	d569c <_ZN8VCNL404012getProximityEv>
   d4180:	9001      	str	r0, [sp, #4]
    Serial.print(reading);
   d4182:	f002 fa49 	bl	d6618 <_Z16_fetch_usbserialv>
   d4186:	9901      	ldr	r1, [sp, #4]
   d4188:	220a      	movs	r2, #10
   d418a:	f002 f860 	bl	d624e <_ZN5Print11printNumberEmh>
   d418e:	9901      	ldr	r1, [sp, #4]
   d4190:	220a      	movs	r2, #10
   d4192:	4620      	mov	r0, r4
   d4194:	f002 f85b 	bl	d624e <_ZN5Print11printNumberEmh>
        n += println();
   d4198:	4620      	mov	r0, r4
   d419a:	f002 f842 	bl	d6222 <_ZN5Print7printlnEv>

    display.println(reading);
    display.display();
   d419e:	4620      	mov	r0, r4
   d41a0:	f001 f9a4 	bl	d54ec <_ZN16Adafruit_SSD13067displayEv>
    delay(200);
   d41a4:	20c8      	movs	r0, #200	; 0xc8
   d41a6:	f002 f8b9 	bl	d631c <delay>
    String output;
   d41aa:	a806      	add	r0, sp, #24
   d41ac:	f001 ff46 	bl	d603c <_ZN6StringD1Ev>
    
  }
  display.clearDisplay();
   d41b0:	4836      	ldr	r0, [pc, #216]	; (d428c <loop+0x174>)
   d41b2:	f000 ff2f 	bl	d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>

  //when button b is pressed, it will aquire the current value from the ambient light sensor and print that on the OLED display

 if (display.pressedB())
   d41b6:	4835      	ldr	r0, [pc, #212]	; (d428c <loop+0x174>)
   d41b8:	f000 fd46 	bl	d4c48 <_ZN16OledWingAdafruit8pressedBEv>
   d41bc:	b378      	cbz	r0, d421e <loop+0x106>
  {
    sensor.powerOnAmbient();
   d41be:	4834      	ldr	r0, [pc, #208]	; (d4290 <loop+0x178>)
   d41c0:	f001 faeb 	bl	d579a <_ZN8VCNL404014powerOnAmbientEv>
    display.clearDisplay();
   d41c4:	4831      	ldr	r0, [pc, #196]	; (d428c <loop+0x174>)
   d41c6:	f000 ff25 	bl	d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(3);
   d41ca:	4830      	ldr	r0, [pc, #192]	; (d428c <loop+0x174>)
   d41cc:	2103      	movs	r1, #3
   d41ce:	f000 fca0 	bl	d4b12 <_ZN12Adafruit_GFX11setTextSizeEh>
   d41d2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41d6:	2100      	movs	r1, #0
   d41d8:	e9c4 1304 	strd	r1, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    String output = "Light Level: ";
   d41dc:	a802      	add	r0, sp, #8
   d41de:	492f      	ldr	r1, [pc, #188]	; (d429c <loop+0x184>)
   d41e0:	f001 ff77 	bl	d60d2 <_ZN6StringC1EPKc>
    uint16_t reading = sensor.getProximity();
   d41e4:	482a      	ldr	r0, [pc, #168]	; (d4290 <loop+0x178>)
   d41e6:	f001 fa59 	bl	d569c <_ZN8VCNL404012getProximityEv>
    output += (String) reading;
   d41ea:	220a      	movs	r2, #10
    uint16_t reading = sensor.getProximity();
   d41ec:	4601      	mov	r1, r0
    output += (String) reading;
   d41ee:	a806      	add	r0, sp, #24
   d41f0:	f001 ff95 	bl	d611e <_ZN6StringC1Eih>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d41f4:	a906      	add	r1, sp, #24
   d41f6:	a802      	add	r0, sp, #8
   d41f8:	f001 ffbb 	bl	d6172 <_ZN6String6concatERKS_>
   d41fc:	a806      	add	r0, sp, #24
   d41fe:	f001 ff1d 	bl	d603c <_ZN6StringD1Ev>
        return printNumber(val, base) + t;
   d4202:	220a      	movs	r2, #10
   d4204:	4629      	mov	r1, r5
   d4206:	4821      	ldr	r0, [pc, #132]	; (d428c <loop+0x174>)
   d4208:	f002 f821 	bl	d624e <_ZN5Print11printNumberEmh>
        n += println();
   d420c:	481f      	ldr	r0, [pc, #124]	; (d428c <loop+0x174>)
   d420e:	f002 f808 	bl	d6222 <_ZN5Print7printlnEv>
    //print to display
    display.println(ambientValue);
    display.display();
   d4212:	481e      	ldr	r0, [pc, #120]	; (d428c <loop+0x174>)
   d4214:	f001 f96a 	bl	d54ec <_ZN16Adafruit_SSD13067displayEv>
    String output = "Light Level: ";
   d4218:	a802      	add	r0, sp, #8
   d421a:	f001 ff0f 	bl	d603c <_ZN6StringD1Ev>
  }
 
   //when button C is pressed, it will print the i2C address to the display

  if (display.pressedC()) {
   d421e:	481b      	ldr	r0, [pc, #108]	; (d428c <loop+0x174>)
   d4220:	f000 fd1c 	bl	d4c5c <_ZN16OledWingAdafruit8pressedCEv>
   d4224:	b190      	cbz	r0, d424c <loop+0x134>
		display.clearDisplay();
   d4226:	4819      	ldr	r0, [pc, #100]	; (d428c <loop+0x174>)
   d4228:	f000 fef4 	bl	d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>

		display.setTextSize(3);
   d422c:	4817      	ldr	r0, [pc, #92]	; (d428c <loop+0x174>)
   d422e:	2103      	movs	r1, #3
   d4230:	f000 fc6f 	bl	d4b12 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4234:	2200      	movs	r2, #0
   d4236:	f04f 1301 	mov.w	r3, #65537	; 0x10001
		display.setTextColor(WHITE);
		display.setCursor(0,0);
		display.println("0x60");
   d423a:	4919      	ldr	r1, [pc, #100]	; (d42a0 <loop+0x188>)
   d423c:	4813      	ldr	r0, [pc, #76]	; (d428c <loop+0x174>)
   d423e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4242:	f001 fffa 	bl	d623a <_ZN5Print7printlnEPKc>
		display.display();
   d4246:	4811      	ldr	r0, [pc, #68]	; (d428c <loop+0x174>)
   d4248:	f001 f950 	bl	d54ec <_ZN16Adafruit_SSD13067displayEv>
	}

  //when the proximity value is less than 8, it will turn on pin D5 
  if (proxValue < 8)
   d424c:	2e07      	cmp	r6, #7
   d424e:	d80f      	bhi.n	d4270 <loop+0x158>
    {
      digitalWrite(D5, HIGH);
   d4250:	2101      	movs	r1, #1
   d4252:	2005      	movs	r0, #5
   d4254:	f002 fc47 	bl	d6ae6 <digitalWrite>
  if (proxValue > 8 && proxValue < 100) 
    {
      digitalWrite(D6, HIGH);
    } 
      else {
      digitalWrite(D6, LOW);
   d4258:	2100      	movs	r1, #0
   d425a:	2006      	movs	r0, #6
   d425c:	f002 fc43 	bl	d6ae6 <digitalWrite>
    }
 
   //when the proximity value is greater than 100, it will turn on pin D7

  if (proxValue > 100) 
   d4260:	2e64      	cmp	r6, #100	; 0x64
   d4262:	d911      	bls.n	d4288 <loop+0x170>
    {
      digitalWrite(D7 ,HIGH);
   d4264:	2101      	movs	r1, #1
    } 
      else {
      digitalWrite(D7, LOW);
   d4266:	2007      	movs	r0, #7
   d4268:	f002 fc3d 	bl	d6ae6 <digitalWrite>
    }
   d426c:	b00a      	add	sp, #40	; 0x28
   d426e:	bd70      	pop	{r4, r5, r6, pc}
      digitalWrite(D5, LOW);
   d4270:	2100      	movs	r1, #0
   d4272:	2005      	movs	r0, #5
   d4274:	f002 fc37 	bl	d6ae6 <digitalWrite>
  if (proxValue > 8 && proxValue < 100) 
   d4278:	f1a6 0309 	sub.w	r3, r6, #9
   d427c:	2b5a      	cmp	r3, #90	; 0x5a
   d427e:	d8eb      	bhi.n	d4258 <loop+0x140>
      digitalWrite(D6, HIGH);
   d4280:	2101      	movs	r1, #1
   d4282:	2006      	movs	r0, #6
   d4284:	f002 fc2f 	bl	d6ae6 <digitalWrite>
      digitalWrite(D7, LOW);
   d4288:	2100      	movs	r1, #0
   d428a:	e7ec      	b.n	d4266 <loop+0x14e>
   d428c:	2003e5d0 	.word	0x2003e5d0
   d4290:	2003e640 	.word	0x2003e640
   d4294:	000d6c98 	.word	0x000d6c98
   d4298:	000d6ca9 	.word	0x000d6ca9
   d429c:	000d6caa 	.word	0x000d6caa
   d42a0:	000d6cb8 	.word	0x000d6cb8

000d42a4 <_GLOBAL__sub_I_display>:
   d42a4:	b510      	push	{r4, lr}
OledWingAdafruit display;
   d42a6:	4c09      	ldr	r4, [pc, #36]	; (d42cc <_GLOBAL__sub_I_display+0x28>)
SYSTEM_THREAD(ENABLED);
   d42a8:	2100      	movs	r1, #0
   d42aa:	2001      	movs	r0, #1
   d42ac:	f001 fcae 	bl	d5c0c <system_thread_set_state>
OledWingAdafruit display;
   d42b0:	2107      	movs	r1, #7
   d42b2:	4620      	mov	r0, r4
   d42b4:	f000 fc4e 	bl	d4b54 <_ZN16OledWingAdafruitC1Ei>
   d42b8:	4620      	mov	r0, r4
   d42ba:	4a05      	ldr	r2, [pc, #20]	; (d42d0 <_GLOBAL__sub_I_display+0x2c>)
   d42bc:	4905      	ldr	r1, [pc, #20]	; (d42d4 <_GLOBAL__sub_I_display+0x30>)
   d42be:	f002 fc7f 	bl	d6bc0 <__aeabi_atexit>
   d42c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
VCNL4040 sensor;
   d42c6:	4804      	ldr	r0, [pc, #16]	; (d42d8 <_GLOBAL__sub_I_display+0x34>)
   d42c8:	f001 b9ae 	b.w	d5628 <_ZN8VCNL4040C1Ev>
   d42cc:	2003e5d0 	.word	0x2003e5d0
   d42d0:	2003e5cc 	.word	0x2003e5cc
   d42d4:	000d4b21 	.word	0x000d4b21
   d42d8:	2003e640 	.word	0x2003e640

000d42dc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d42dc:	4770      	bx	lr

000d42de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d42de:	b510      	push	{r4, lr}
  }
   d42e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d42e2:	4604      	mov	r4, r0
  }
   d42e4:	f002 fc71 	bl	d6bca <_ZdlPvj>
   d42e8:	4620      	mov	r0, r4
   d42ea:	bd10      	pop	{r4, pc}

000d42ec <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42ec:	b40e      	push	{r1, r2, r3}
   d42ee:	b503      	push	{r0, r1, lr}
   d42f0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d42f2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42f4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42f8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42fa:	f001 ffc6 	bl	d628a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d42fe:	b002      	add	sp, #8
   d4300:	f85d eb04 	ldr.w	lr, [sp], #4
   d4304:	b003      	add	sp, #12
   d4306:	4770      	bx	lr

000d4308 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4308:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d430a:	4604      	mov	r4, r0
   d430c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d430e:	7922      	ldrb	r2, [r4, #4]
   d4310:	68a3      	ldr	r3, [r4, #8]
   d4312:	b132      	cbz	r2, d4322 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4314:	b9a3      	cbnz	r3, d4340 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4316:	490b      	ldr	r1, [pc, #44]	; (d4344 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4318:	b002      	add	sp, #8
   d431a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d431e:	f001 bf79 	b.w	d6214 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4322:	4a09      	ldr	r2, [pc, #36]	; (d4348 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4324:	7b26      	ldrb	r6, [r4, #12]
   d4326:	4d09      	ldr	r5, [pc, #36]	; (d434c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4328:	4909      	ldr	r1, [pc, #36]	; (d4350 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d432a:	7b64      	ldrb	r4, [r4, #13]
   d432c:	2e01      	cmp	r6, #1
   d432e:	bf18      	it	ne
   d4330:	4629      	movne	r1, r5
   d4332:	e9cd 1400 	strd	r1, r4, [sp]
   d4336:	4907      	ldr	r1, [pc, #28]	; (d4354 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4338:	f7ff ffd8 	bl	d42ec <_ZN5Print6printfEPKcz>
  }
   d433c:	b002      	add	sp, #8
   d433e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4340:	4a05      	ldr	r2, [pc, #20]	; (d4358 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4342:	e7ef      	b.n	d4324 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4344:	000d6cce 	.word	0x000d6cce
   d4348:	000d6ca9 	.word	0x000d6ca9
   d434c:	000d6cca 	.word	0x000d6cca
   d4350:	000d6cc6 	.word	0x000d6cc6
   d4354:	000d6ce4 	.word	0x000d6ce4
   d4358:	000d6cbd 	.word	0x000d6cbd

000d435c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4360:	b085      	sub	sp, #20
   d4362:	461f      	mov	r7, r3
   d4364:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4368:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d436c:	eba8 0902 	sub.w	r9, r8, r2
   d4370:	eba7 0a01 	sub.w	sl, r7, r1
   d4374:	f1b9 0f00 	cmp.w	r9, #0
   d4378:	bfb8      	it	lt
   d437a:	f1c9 0900 	rsblt	r9, r9, #0
   d437e:	f1ba 0f00 	cmp.w	sl, #0
   d4382:	bfb8      	it	lt
   d4384:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4388:	45d1      	cmp	r9, sl
        uint16_t color) {
   d438a:	4683      	mov	fp, r0
   d438c:	460c      	mov	r4, r1
   d438e:	4615      	mov	r5, r2
    if (steep) {
   d4390:	dd04      	ble.n	d439c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4392:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4394:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4396:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4398:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d439a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d439c:	42bc      	cmp	r4, r7
   d439e:	dd05      	ble.n	d43ac <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d43a0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d43a2:	4645      	mov	r5, r8
   d43a4:	4690      	mov	r8, r2
    if (x0 > x1) {
   d43a6:	4622      	mov	r2, r4
   d43a8:	463c      	mov	r4, r7
   d43aa:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d43ac:	1b3e      	subs	r6, r7, r4
   d43ae:	b2b2      	uxth	r2, r6
   d43b0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d43b2:	eba8 0205 	sub.w	r2, r8, r5
   d43b6:	2a00      	cmp	r2, #0
   d43b8:	bfb8      	it	lt
   d43ba:	4252      	neglt	r2, r2
   d43bc:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d43be:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d43c2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d43c6:	4545      	cmp	r5, r8
   d43c8:	bfb4      	ite	lt
   d43ca:	2201      	movlt	r2, #1
   d43cc:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d43d0:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d43d2:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d43d4:	42bc      	cmp	r4, r7
   d43d6:	dc1c      	bgt.n	d4412 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d43d8:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d43dc:	9303      	str	r3, [sp, #12]
        if (steep) {
   d43de:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d43e0:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d43e4:	bfc7      	ittee	gt
   d43e6:	4629      	movgt	r1, r5
   d43e8:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d43ea:	462a      	movle	r2, r5
   d43ec:	4621      	movle	r1, r4
   d43ee:	4658      	mov	r0, fp
   d43f0:	47c0      	blx	r8
        }
        err -= dy;
   d43f2:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d43f4:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d43f6:	1ab6      	subs	r6, r6, r2
   d43f8:	b2b1      	uxth	r1, r6
   d43fa:	b236      	sxth	r6, r6
        if (err < 0) {
   d43fc:	2e00      	cmp	r6, #0
   d43fe:	da05      	bge.n	d440c <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4400:	9a02      	ldr	r2, [sp, #8]
   d4402:	4415      	add	r5, r2
            err += dx;
   d4404:	9a00      	ldr	r2, [sp, #0]
   d4406:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4408:	b22d      	sxth	r5, r5
            err += dx;
   d440a:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d440c:	3401      	adds	r4, #1
   d440e:	b224      	sxth	r4, r4
   d4410:	e7e0      	b.n	d43d4 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4412:	b005      	add	sp, #20
   d4414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4418 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4418:	4770      	bx	lr

000d441a <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d441a:	b410      	push	{r4}
    drawPixel(x, y, color);
   d441c:	6804      	ldr	r4, [r0, #0]
   d441e:	6924      	ldr	r4, [r4, #16]
   d4420:	46a4      	mov	ip, r4
}
   d4422:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4426:	4760      	bx	ip

000d4428 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4428:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d442a:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d442c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4430:	9502      	str	r5, [sp, #8]
   d4432:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4434:	46a4      	mov	ip, r4
}
   d4436:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4438:	4760      	bx	ip

000d443a <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d443a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d443c:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d443e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4442:	9502      	str	r5, [sp, #8]
   d4444:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4446:	46a4      	mov	ip, r4
}
   d4448:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d444a:	4760      	bx	ip

000d444c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d444c:	b470      	push	{r4, r5, r6}
   d444e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4452:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4456:	6804      	ldr	r4, [r0, #0]
   d4458:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d445c:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d445e:	46a4      	mov	ip, r4
}
   d4460:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4462:	4760      	bx	ip

000d4464 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4464:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4468:	461c      	mov	r4, r3
    startWrite();
   d446a:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d446c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4470:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4472:	4605      	mov	r5, r0
   d4474:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4476:	3c01      	subs	r4, #1
   d4478:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d447a:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d447c:	b224      	sxth	r4, r4
    startWrite();
   d447e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4480:	682b      	ldr	r3, [r5, #0]
   d4482:	f8cd 8004 	str.w	r8, [sp, #4]
   d4486:	9400      	str	r4, [sp, #0]
   d4488:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d448a:	4628      	mov	r0, r5
   d448c:	463b      	mov	r3, r7
   d448e:	4632      	mov	r2, r6
   d4490:	4639      	mov	r1, r7
   d4492:	47a0      	blx	r4
    endWrite();
   d4494:	682b      	ldr	r3, [r5, #0]
   d4496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4498:	4628      	mov	r0, r5
}
   d449a:	b002      	add	sp, #8
   d449c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d44a0:	4718      	bx	r3

000d44a2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d44a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44a6:	461d      	mov	r5, r3
    startWrite();
   d44a8:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d44aa:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d44ae:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d44b0:	4604      	mov	r4, r0
   d44b2:	4617      	mov	r7, r2
   d44b4:	460e      	mov	r6, r1
    startWrite();
   d44b6:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d44b8:	e9cd 7800 	strd	r7, r8, [sp]
   d44bc:	6822      	ldr	r2, [r4, #0]
   d44be:	1e6b      	subs	r3, r5, #1
   d44c0:	4433      	add	r3, r6
   d44c2:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d44c4:	4620      	mov	r0, r4
   d44c6:	b21b      	sxth	r3, r3
   d44c8:	463a      	mov	r2, r7
   d44ca:	4631      	mov	r1, r6
   d44cc:	47a8      	blx	r5
    endWrite();
   d44ce:	6823      	ldr	r3, [r4, #0]
   d44d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44d2:	4620      	mov	r0, r4
}
   d44d4:	b002      	add	sp, #8
   d44d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d44da:	4718      	bx	r3

000d44dc <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44e0:	461e      	mov	r6, r3
    startWrite();
   d44e2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d44e4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d44e8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d44ea:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d44ee:	460c      	mov	r4, r1
   d44f0:	4605      	mov	r5, r0
   d44f2:	4617      	mov	r7, r2
    startWrite();
   d44f4:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d44f6:	4426      	add	r6, r4
   d44f8:	42b4      	cmp	r4, r6
   d44fa:	682b      	ldr	r3, [r5, #0]
   d44fc:	da0b      	bge.n	d4516 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d44fe:	f8cd 8000 	str.w	r8, [sp]
   d4502:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4506:	4621      	mov	r1, r4
   d4508:	464b      	mov	r3, r9
   d450a:	463a      	mov	r2, r7
   d450c:	4628      	mov	r0, r5
   d450e:	3401      	adds	r4, #1
   d4510:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4512:	b224      	sxth	r4, r4
   d4514:	e7f0      	b.n	d44f8 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4518:	4628      	mov	r0, r5
}
   d451a:	b002      	add	sp, #8
   d451c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4520:	4718      	bx	r3

000d4522 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4522:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4524:	6802      	ldr	r2, [r0, #0]
   d4526:	9101      	str	r1, [sp, #4]
   d4528:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d452c:	9100      	str	r1, [sp, #0]
   d452e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4530:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4534:	2200      	movs	r2, #0
   d4536:	4611      	mov	r1, r2
   d4538:	47a0      	blx	r4
}
   d453a:	b002      	add	sp, #8
   d453c:	bd10      	pop	{r4, pc}

000d453e <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d453e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4542:	461d      	mov	r5, r3
    startWrite();
   d4544:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4546:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d454a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d454c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4550:	4604      	mov	r4, r0
   d4552:	460f      	mov	r7, r1
   d4554:	4616      	mov	r6, r2
    startWrite();
   d4556:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4558:	6823      	ldr	r3, [r4, #0]
   d455a:	f8cd 8000 	str.w	r8, [sp]
   d455e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4562:	4632      	mov	r2, r6
   d4564:	462b      	mov	r3, r5
   d4566:	4639      	mov	r1, r7
   d4568:	4620      	mov	r0, r4
   d456a:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d456c:	6823      	ldr	r3, [r4, #0]
   d456e:	f8cd 8000 	str.w	r8, [sp]
   d4572:	f109 32ff 	add.w	r2, r9, #4294967295
   d4576:	4432      	add	r2, r6
   d4578:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d457c:	4639      	mov	r1, r7
   d457e:	462b      	mov	r3, r5
   d4580:	4620      	mov	r0, r4
   d4582:	b212      	sxth	r2, r2
   d4584:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4586:	6823      	ldr	r3, [r4, #0]
   d4588:	f8cd 8000 	str.w	r8, [sp]
   d458c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4590:	4632      	mov	r2, r6
   d4592:	464b      	mov	r3, r9
   d4594:	4639      	mov	r1, r7
   d4596:	4620      	mov	r0, r4
   d4598:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d459a:	1e6b      	subs	r3, r5, #1
   d459c:	19d9      	adds	r1, r3, r7
   d459e:	6823      	ldr	r3, [r4, #0]
   d45a0:	f8cd 8000 	str.w	r8, [sp]
   d45a4:	6a1d      	ldr	r5, [r3, #32]
   d45a6:	4620      	mov	r0, r4
   d45a8:	464b      	mov	r3, r9
   d45aa:	4632      	mov	r2, r6
   d45ac:	b209      	sxth	r1, r1
   d45ae:	47a8      	blx	r5
    endWrite();
   d45b0:	6823      	ldr	r3, [r4, #0]
   d45b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45b4:	4620      	mov	r0, r4
}
   d45b6:	b002      	add	sp, #8
   d45b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d45bc:	4718      	bx	r3

000d45be <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d45be:	4770      	bx	lr

000d45c0 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d45c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d45c4:	4299      	cmp	r1, r3
        uint16_t color) {
   d45c6:	4616      	mov	r6, r2
   d45c8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d45cc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d45d0:	6802      	ldr	r2, [r0, #0]
   d45d2:	4680      	mov	r8, r0
   d45d4:	460d      	mov	r5, r1
   d45d6:	461c      	mov	r4, r3
    if(x0 == x1){
   d45d8:	d113      	bne.n	d4602 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d45da:	42be      	cmp	r6, r7
   d45dc:	bfc8      	it	gt
   d45de:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d45e0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d45e4:	bfc4      	itt	gt
   d45e6:	463e      	movgt	r6, r7
   d45e8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d45ea:	1c7b      	adds	r3, r7, #1
   d45ec:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d45ee:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45f0:	b21b      	sxth	r3, r3
   d45f2:	4632      	mov	r2, r6
   d45f4:	4629      	mov	r1, r5
   d45f6:	4640      	mov	r0, r8
   d45f8:	46a4      	mov	ip, r4
}
   d45fa:	b003      	add	sp, #12
   d45fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4600:	4760      	bx	ip
    } else if(y0 == y1){
   d4602:	42be      	cmp	r6, r7
   d4604:	d10a      	bne.n	d461c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4606:	4299      	cmp	r1, r3
   d4608:	bfc2      	ittt	gt
   d460a:	460b      	movgt	r3, r1
   d460c:	4625      	movgt	r5, r4
   d460e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4610:	1c63      	adds	r3, r4, #1
   d4612:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4616:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4618:	1b5b      	subs	r3, r3, r5
   d461a:	e7e9      	b.n	d45f0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d461c:	6953      	ldr	r3, [r2, #20]
   d461e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4620:	e9cd 7900 	strd	r7, r9, [sp]
   d4624:	f8d8 3000 	ldr.w	r3, [r8]
   d4628:	4640      	mov	r0, r8
   d462a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d462c:	4632      	mov	r2, r6
   d462e:	4623      	mov	r3, r4
   d4630:	4629      	mov	r1, r5
   d4632:	47b8      	blx	r7
        endWrite();
   d4634:	f8d8 3000 	ldr.w	r3, [r8]
   d4638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d463a:	4640      	mov	r0, r8
}
   d463c:	b003      	add	sp, #12
   d463e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4642:	4718      	bx	r3

000d4644 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4644:	f001 0303 	and.w	r3, r1, #3
   d4648:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d464c:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d464e:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4650:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4654:	bf59      	ittee	pl
   d4656:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4658:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d465a:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d465c:	81c3      	strhmi	r3, [r0, #14]
}
   d465e:	4770      	bx	lr

000d4660 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4660:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d4662:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4664:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d4666:	4a07      	ldr	r2, [pc, #28]	; (d4684 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4668:	4d07      	ldr	r5, [pc, #28]	; (d4688 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d466a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d466c:	2400      	movs	r4, #0
    _width    = WIDTH;
   d466e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4670:	f04f 31ff 	mov.w	r1, #4294967295
   d4674:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4678:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d467a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d467c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d467e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4680:	6204      	str	r4, [r0, #32]
}
   d4682:	bd30      	pop	{r4, r5, pc}
   d4684:	01000101 	.word	0x01000101
   d4688:	000d720c 	.word	0x000d720c

000d468c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4690:	b089      	sub	sp, #36	; 0x24
   d4692:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d4696:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4698:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d469c:	9304      	str	r3, [sp, #16]
   d469e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d46a2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d46a4:	9305      	str	r3, [sp, #20]
   d46a6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d46aa:	4604      	mov	r4, r0
    startWrite();
   d46ac:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d46ae:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d46b2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d46b6:	bf48      	it	mi
   d46b8:	f108 020e 	addmi.w	r2, r8, #14
   d46bc:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d46c0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d46c2:	4635      	mov	r5, r6
   d46c4:	9b03      	ldr	r3, [sp, #12]
   d46c6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d46c8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d46cc:	189a      	adds	r2, r3, r2
   d46ce:	9b05      	ldr	r3, [sp, #20]
   d46d0:	428b      	cmp	r3, r1
   d46d2:	b212      	sxth	r2, r2
   d46d4:	dd27      	ble.n	d4726 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46d6:	9b04      	ldr	r3, [sp, #16]
   d46d8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d46da:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46de:	9306      	str	r3, [sp, #24]
   d46e0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d46e4:	4580      	cmp	r8, r0
   d46e6:	fa1f f189 	uxth.w	r1, r9
   d46ea:	dd17      	ble.n	d471c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d46ec:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46ee:	bf05      	ittet	eq
   d46f0:	9b06      	ldreq	r3, [sp, #24]
   d46f2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d46f4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46f6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d46f8:	bf18      	it	ne
   d46fa:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d46fc:	062b      	lsls	r3, r5, #24
   d46fe:	d50a      	bpl.n	d4716 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4700:	9b02      	ldr	r3, [sp, #8]
   d4702:	6820      	ldr	r0, [r4, #0]
   d4704:	9207      	str	r2, [sp, #28]
   d4706:	4419      	add	r1, r3
   d4708:	6983      	ldr	r3, [r0, #24]
   d470a:	b209      	sxth	r1, r1
   d470c:	461f      	mov	r7, r3
   d470e:	4620      	mov	r0, r4
   d4710:	4653      	mov	r3, sl
   d4712:	47b8      	blx	r7
   d4714:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d4716:	f109 0901 	add.w	r9, r9, #1
   d471a:	e7e1      	b.n	d46e0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d471c:	9b01      	ldr	r3, [sp, #4]
   d471e:	3301      	adds	r3, #1
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	445e      	add	r6, fp
   d4724:	e7ce      	b.n	d46c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d4726:	6823      	ldr	r3, [r4, #0]
   d4728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d472a:	4620      	mov	r0, r4
}
   d472c:	b009      	add	sp, #36	; 0x24
   d472e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d4732:	4718      	bx	r3

000d4734 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4738:	ed2d 8b02 	vpush	{d8}
   d473c:	b091      	sub	sp, #68	; 0x44
   d473e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4740:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4742:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d4746:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d474a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d474e:	9103      	str	r1, [sp, #12]
   d4750:	461f      	mov	r7, r3
   d4752:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d4756:	9304      	str	r3, [sp, #16]
   d4758:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d475a:	2a00      	cmp	r2, #0
   d475c:	f040 80c5 	bne.w	d48ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4760:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4764:	428b      	cmp	r3, r1
   d4766:	f340 814c 	ble.w	d4a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d476a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d476e:	42b3      	cmp	r3, r6
   d4770:	f340 8147 	ble.w	d4a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4774:	2306      	movs	r3, #6
   d4776:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d477a:	2b00      	cmp	r3, #0
   d477c:	f340 8141 	ble.w	d4a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4780:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4784:	2b00      	cmp	r3, #0
   d4786:	f340 813c 	ble.w	d4a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d478a:	7f03      	ldrb	r3, [r0, #28]
   d478c:	b91b      	cbnz	r3, d4796 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d478e:	2faf      	cmp	r7, #175	; 0xaf
   d4790:	bf84      	itt	hi
   d4792:	3701      	addhi	r7, #1
   d4794:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d4796:	f8db 3000 	ldr.w	r3, [fp]
   d479a:	4658      	mov	r0, fp
   d479c:	695b      	ldr	r3, [r3, #20]
   d479e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d47a0:	2205      	movs	r2, #5
   d47a2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d47a4:	2200      	movs	r2, #0
   d47a6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d47a8:	4a98      	ldr	r2, [pc, #608]	; (d4a0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d47aa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d47ae:	18d3      	adds	r3, r2, r3
   d47b0:	930c      	str	r3, [sp, #48]	; 0x30
   d47b2:	b2b3      	uxth	r3, r6
   d47b4:	9306      	str	r3, [sp, #24]
   d47b6:	9a05      	ldr	r2, [sp, #20]
   d47b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d47ba:	5c9b      	ldrb	r3, [r3, r2]
   d47bc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47be:	b2ab      	uxth	r3, r5
   d47c0:	930b      	str	r3, [sp, #44]	; 0x2c
   d47c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d47c6:	9308      	str	r3, [sp, #32]
   d47c8:	9b03      	ldr	r3, [sp, #12]
   d47ca:	fb02 f905 	mul.w	r9, r2, r5
   d47ce:	fa19 f983 	uxtah	r9, r9, r3
   d47d2:	fa0f f389 	sxth.w	r3, r9
   d47d6:	ee08 3a10 	vmov	s16, r3
   d47da:	2308      	movs	r3, #8
   d47dc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d47de:	9b03      	ldr	r3, [sp, #12]
   d47e0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47e4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d47e8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d47ec:	9a07      	ldr	r2, [sp, #28]
   d47ee:	f8db 3000 	ldr.w	r3, [fp]
   d47f2:	07d2      	lsls	r2, r2, #31
   d47f4:	d552      	bpl.n	d489c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d47f6:	2d01      	cmp	r5, #1
   d47f8:	fa1f f289 	uxth.w	r2, r9
   d47fc:	d13e      	bne.n	d487c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d47fe:	2c01      	cmp	r4, #1
   d4800:	d13c      	bne.n	d487c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d4802:	699b      	ldr	r3, [r3, #24]
   d4804:	9906      	ldr	r1, [sp, #24]
   d4806:	461f      	mov	r7, r3
   d4808:	9b04      	ldr	r3, [sp, #16]
   d480a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d480c:	b212      	sxth	r2, r2
   d480e:	4651      	mov	r1, sl
   d4810:	4658      	mov	r0, fp
   d4812:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4814:	f109 0301 	add.w	r3, r9, #1
   d4818:	fa4f f983 	sxtb.w	r9, r3
   d481c:	9b07      	ldr	r3, [sp, #28]
   d481e:	085b      	lsrs	r3, r3, #1
   d4820:	9307      	str	r3, [sp, #28]
   d4822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4824:	3b01      	subs	r3, #1
   d4826:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d482a:	930a      	str	r3, [sp, #40]	; 0x28
   d482c:	d1de      	bne.n	d47ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d482e:	9f05      	ldr	r7, [sp, #20]
   d4830:	3701      	adds	r7, #1
   d4832:	b27b      	sxtb	r3, r7
   d4834:	9305      	str	r3, [sp, #20]
   d4836:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4838:	3b01      	subs	r3, #1
   d483a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d483e:	9309      	str	r3, [sp, #36]	; 0x24
   d4840:	d1b9      	bne.n	d47b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d4842:	9b04      	ldr	r3, [sp, #16]
   d4844:	4543      	cmp	r3, r8
   d4846:	d00f      	beq.n	d4868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4848:	2d01      	cmp	r5, #1
   d484a:	f8db 3000 	ldr.w	r3, [fp]
   d484e:	d13b      	bne.n	d48c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4850:	2c01      	cmp	r4, #1
   d4852:	d139      	bne.n	d48c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4854:	9908      	ldr	r1, [sp, #32]
   d4856:	f8cd 8000 	str.w	r8, [sp]
   d485a:	3105      	adds	r1, #5
   d485c:	6a1c      	ldr	r4, [r3, #32]
   d485e:	4632      	mov	r2, r6
   d4860:	2308      	movs	r3, #8
   d4862:	b209      	sxth	r1, r1
   d4864:	4658      	mov	r0, fp
   d4866:	47a0      	blx	r4
        endWrite();
   d4868:	f8db 3000 	ldr.w	r3, [fp]
   d486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d486e:	4658      	mov	r0, fp
}
   d4870:	b011      	add	sp, #68	; 0x44
   d4872:	ecbd 8b02 	vpop	{d8}
   d4876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d487a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d487c:	9906      	ldr	r1, [sp, #24]
   d487e:	fb14 f202 	smulbb	r2, r4, r2
   d4882:	440a      	add	r2, r1
   d4884:	9904      	ldr	r1, [sp, #16]
   d4886:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4888:	9400      	str	r4, [sp, #0]
   d488a:	69db      	ldr	r3, [r3, #28]
   d488c:	ee18 1a10 	vmov	r1, s16
   d4890:	461f      	mov	r7, r3
   d4892:	b212      	sxth	r2, r2
   d4894:	462b      	mov	r3, r5
   d4896:	4658      	mov	r0, fp
   d4898:	47b8      	blx	r7
   d489a:	e7bb      	b.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d489c:	9a04      	ldr	r2, [sp, #16]
   d489e:	4542      	cmp	r2, r8
   d48a0:	d0b8      	beq.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d48a2:	2d01      	cmp	r5, #1
   d48a4:	fa1f f289 	uxth.w	r2, r9
   d48a8:	d107      	bne.n	d48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d48aa:	2c01      	cmp	r4, #1
   d48ac:	d105      	bne.n	d48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d48ae:	699b      	ldr	r3, [r3, #24]
   d48b0:	9906      	ldr	r1, [sp, #24]
   d48b2:	461f      	mov	r7, r3
   d48b4:	440a      	add	r2, r1
   d48b6:	4643      	mov	r3, r8
   d48b8:	e7a8      	b.n	d480c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d48ba:	9906      	ldr	r1, [sp, #24]
   d48bc:	f8cd 8004 	str.w	r8, [sp, #4]
   d48c0:	fb14 f202 	smulbb	r2, r4, r2
   d48c4:	440a      	add	r2, r1
   d48c6:	e7df      	b.n	d4888 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d48c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d48ca:	f8cd 8004 	str.w	r8, [sp, #4]
   d48ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d48d2:	9a08      	ldr	r2, [sp, #32]
   d48d4:	00e4      	lsls	r4, r4, #3
   d48d6:	440a      	add	r2, r1
   d48d8:	4611      	mov	r1, r2
   d48da:	9400      	str	r4, [sp, #0]
   d48dc:	69dc      	ldr	r4, [r3, #28]
   d48de:	4632      	mov	r2, r6
   d48e0:	462b      	mov	r3, r5
   d48e2:	b209      	sxth	r1, r1
   d48e4:	4658      	mov	r0, fp
   d48e6:	47a0      	blx	r4
        endWrite();
   d48e8:	e7be      	b.n	d4868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d48ea:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d48ec:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d48ee:	6812      	ldr	r2, [r2, #0]
   d48f0:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d48f2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d48f4:	b2ff      	uxtb	r7, r7
   d48f6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d48fa:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d48fe:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4900:	789a      	ldrb	r2, [r3, #2]
   d4902:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4904:	78da      	ldrb	r2, [r3, #3]
   d4906:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4908:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d490a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d490e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4912:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4914:	d801      	bhi.n	d491a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d4916:	2c01      	cmp	r4, #1
   d4918:	d957      	bls.n	d49ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d491a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d491e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4920:	fa0f f38a 	sxth.w	r3, sl
   d4924:	9307      	str	r3, [sp, #28]
        startWrite();
   d4926:	f8db 3000 	ldr.w	r3, [fp]
   d492a:	4658      	mov	r0, fp
   d492c:	695b      	ldr	r3, [r3, #20]
   d492e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4930:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4932:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4936:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4938:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d493c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d493e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4940:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4944:	429f      	cmp	r7, r3
   d4946:	d28f      	bcs.n	d4868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4948:	9b07      	ldr	r3, [sp, #28]
   d494a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d494c:	443b      	add	r3, r7
   d494e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4952:	2200      	movs	r2, #0
   d4954:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4958:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d495a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d495e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4962:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4966:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4968:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d496a:	9905      	ldr	r1, [sp, #20]
   d496c:	4291      	cmp	r1, r2
   d496e:	d241      	bcs.n	d49f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4970:	1c5a      	adds	r2, r3, #1
   d4972:	b2d2      	uxtb	r2, r2
   d4974:	075b      	lsls	r3, r3, #29
   d4976:	920c      	str	r2, [sp, #48]	; 0x30
   d4978:	d107      	bne.n	d498a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d497a:	9b06      	ldr	r3, [sp, #24]
   d497c:	9906      	ldr	r1, [sp, #24]
   d497e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4980:	3301      	adds	r3, #1
   d4982:	b29b      	uxth	r3, r3
   d4984:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4988:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d498a:	f019 0f80 	tst.w	r9, #128	; 0x80
   d498e:	d012      	beq.n	d49b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4990:	2d01      	cmp	r5, #1
   d4992:	f8db 3000 	ldr.w	r3, [fp]
   d4996:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d499a:	d11a      	bne.n	d49d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d499c:	2c01      	cmp	r4, #1
   d499e:	d118      	bne.n	d49d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d49a2:	699b      	ldr	r3, [r3, #24]
   d49a4:	4411      	add	r1, r2
   d49a6:	9a05      	ldr	r2, [sp, #20]
   d49a8:	4411      	add	r1, r2
   d49aa:	461e      	mov	r6, r3
   d49ac:	4652      	mov	r2, sl
   d49ae:	9b04      	ldr	r3, [sp, #16]
   d49b0:	b209      	sxth	r1, r1
   d49b2:	4658      	mov	r0, fp
   d49b4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d49b6:	9e05      	ldr	r6, [sp, #20]
   d49b8:	3601      	adds	r6, #1
   d49ba:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d49bc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d49c0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d49c2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d49c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d49c8:	e7ce      	b.n	d4968 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d49ca:	2300      	movs	r3, #0
   d49cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d49d0:	e7a9      	b.n	d4926 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49d2:	9805      	ldr	r0, [sp, #20]
   d49d4:	9a08      	ldr	r2, [sp, #32]
   d49d6:	4402      	add	r2, r0
   d49d8:	fb02 1105 	mla	r1, r2, r5, r1
   d49dc:	9a04      	ldr	r2, [sp, #16]
   d49de:	e9cd 4200 	strd	r4, r2, [sp]
   d49e2:	69db      	ldr	r3, [r3, #28]
   d49e4:	ee18 2a10 	vmov	r2, s16
   d49e8:	461e      	mov	r6, r3
   d49ea:	b209      	sxth	r1, r1
   d49ec:	462b      	mov	r3, r5
   d49ee:	4658      	mov	r0, fp
   d49f0:	47b0      	blx	r6
   d49f2:	e7e0      	b.n	d49b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d49f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d49f6:	3701      	adds	r7, #1
   d49f8:	4498      	add	r8, r3
   d49fa:	fa5f f888 	uxtb.w	r8, r8
   d49fe:	b2ff      	uxtb	r7, r7
   d4a00:	e79f      	b.n	d4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4a02:	b011      	add	sp, #68	; 0x44
   d4a04:	ecbd 8b02 	vpop	{d8}
   d4a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a0c:	000d6d01 	.word	0x000d6d01

000d4a10 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4a12:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4a14:	b085      	sub	sp, #20
   d4a16:	4604      	mov	r4, r0
   d4a18:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4a1a:	2a00      	cmp	r2, #0
   d4a1c:	d134      	bne.n	d4a88 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4a1e:	290a      	cmp	r1, #10
   d4a20:	d108      	bne.n	d4a34 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4a22:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4a24:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4a26:	7e42      	ldrb	r2, [r0, #25]
   d4a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4a2c:	8263      	strh	r3, [r4, #18]
}
   d4a2e:	2001      	movs	r0, #1
   d4a30:	b005      	add	sp, #20
   d4a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4a34:	290d      	cmp	r1, #13
   d4a36:	d0fa      	beq.n	d4a2e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4a38:	7ee1      	ldrb	r1, [r4, #27]
   d4a3a:	7e00      	ldrb	r0, [r0, #24]
   d4a3c:	7e65      	ldrb	r5, [r4, #25]
   d4a3e:	b171      	cbz	r1, d4a5e <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4a40:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4a44:	2106      	movs	r1, #6
   d4a46:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4a4a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4a4e:	42b1      	cmp	r1, r6
   d4a50:	bfc1      	itttt	gt
   d4a52:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4a56:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4a58:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4a5c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a5e:	8ae2      	ldrh	r2, [r4, #22]
   d4a60:	9201      	str	r2, [sp, #4]
   d4a62:	8aa2      	ldrh	r2, [r4, #20]
   d4a64:	9200      	str	r2, [sp, #0]
   d4a66:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4a6a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a6e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a72:	4620      	mov	r0, r4
   d4a74:	f7ff fe5e 	bl	d4734 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4a78:	7e23      	ldrb	r3, [r4, #24]
   d4a7a:	8a22      	ldrh	r2, [r4, #16]
   d4a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4a80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a84:	8223      	strh	r3, [r4, #16]
   d4a86:	e7d2      	b.n	d4a2e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4a88:	290a      	cmp	r1, #10
   d4a8a:	d107      	bne.n	d4a9c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a90:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4a92:	7e41      	ldrb	r1, [r0, #25]
   d4a94:	8a42      	ldrh	r2, [r0, #18]
   d4a96:	fb01 2303 	mla	r3, r1, r3, r2
   d4a9a:	e7c7      	b.n	d4a2c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4a9c:	290d      	cmp	r1, #13
   d4a9e:	d0c6      	beq.n	d4a2e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4aa0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4aa2:	42a9      	cmp	r1, r5
   d4aa4:	d3c3      	bcc.n	d4a2e <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4aa6:	7a51      	ldrb	r1, [r2, #9]
   d4aa8:	4299      	cmp	r1, r3
   d4aaa:	d3c0      	bcc.n	d4a2e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4aac:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4aae:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4ab0:	b2ed      	uxtb	r5, r5
   d4ab2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4ab6:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4ab8:	b32f      	cbz	r7, d4b06 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4aba:	78e9      	ldrb	r1, [r5, #3]
   d4abc:	b319      	cbz	r1, d4b06 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4abe:	7ee1      	ldrb	r1, [r4, #27]
   d4ac0:	7e00      	ldrb	r0, [r0, #24]
   d4ac2:	7e66      	ldrb	r6, [r4, #25]
   d4ac4:	b191      	cbz	r1, d4aec <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4ac6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4aca:	4439      	add	r1, r7
   d4acc:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4ad0:	fb00 7101 	mla	r1, r0, r1, r7
   d4ad4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4ad8:	42b9      	cmp	r1, r7
   d4ada:	dd07      	ble.n	d4aec <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4adc:	2700      	movs	r7, #0
   d4ade:	8227      	strh	r7, [r4, #16]
   d4ae0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4ae4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4ae6:	fb02 1206 	mla	r2, r2, r6, r1
   d4aea:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4aec:	8ae2      	ldrh	r2, [r4, #22]
   d4aee:	9201      	str	r2, [sp, #4]
   d4af0:	8aa2      	ldrh	r2, [r4, #20]
   d4af2:	9200      	str	r2, [sp, #0]
   d4af4:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4af8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4afc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4b00:	4620      	mov	r0, r4
   d4b02:	f7ff fe17 	bl	d4734 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b06:	7929      	ldrb	r1, [r5, #4]
   d4b08:	7e23      	ldrb	r3, [r4, #24]
   d4b0a:	8a22      	ldrh	r2, [r4, #16]
   d4b0c:	fb01 2303 	mla	r3, r1, r3, r2
   d4b10:	e7b8      	b.n	d4a84 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4b12 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4b12:	2901      	cmp	r1, #1
   d4b14:	bf38      	it	cc
   d4b16:	2101      	movcc	r1, #1
   d4b18:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4b1a:	7641      	strb	r1, [r0, #25]
}
   d4b1c:	4770      	bx	lr
	...

000d4b20 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4b20:	b510      	push	{r4, lr}
   d4b22:	4b06      	ldr	r3, [pc, #24]	; (d4b3c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4b24:	6003      	str	r3, [r0, #0]
   d4b26:	4604      	mov	r4, r0
	if (mutex) {
   d4b28:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4b2a:	b108      	cbz	r0, d4b30 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4b2c:	f000 ff1e 	bl	d596c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4b30:	4620      	mov	r0, r4
   d4b32:	f000 f8f7 	bl	d4d24 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4b36:	4620      	mov	r0, r4
   d4b38:	bd10      	pop	{r4, pc}
   d4b3a:	bf00      	nop
   d4b3c:	000d7264 	.word	0x000d7264

000d4b40 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4b40:	b510      	push	{r4, lr}
   d4b42:	4604      	mov	r4, r0
}
   d4b44:	f7ff ffec 	bl	d4b20 <_ZN16OledWingAdafruitD1Ev>
   d4b48:	4620      	mov	r0, r4
   d4b4a:	2170      	movs	r1, #112	; 0x70
   d4b4c:	f002 f83d 	bl	d6bca <_ZdlPvj>
   d4b50:	4620      	mov	r0, r4
   d4b52:	bd10      	pop	{r4, pc}

000d4b54 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4b54:	b530      	push	{r4, r5, lr}
   d4b56:	b085      	sub	sp, #20
   d4b58:	4604      	mov	r4, r0
   d4b5a:	460d      	mov	r5, r1
   d4b5c:	f002 f808 	bl	d6b70 <_Z19__fetch_global_Wirev>
   d4b60:	4a10      	ldr	r2, [pc, #64]	; (d4ba4 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4b62:	4911      	ldr	r1, [pc, #68]	; (d4ba8 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4b64:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4b68:	f04f 32ff 	mov.w	r2, #4294967295
   d4b6c:	2180      	movs	r1, #128	; 0x80
   d4b6e:	4603      	mov	r3, r0
   d4b70:	9200      	str	r2, [sp, #0]
   d4b72:	4620      	mov	r0, r4
   d4b74:	2220      	movs	r2, #32
   d4b76:	f000 f95b 	bl	d4e30 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4b7a:	4b0c      	ldr	r3, [pc, #48]	; (d4bac <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4b7c:	6023      	str	r3, [r4, #0]
   d4b7e:	2300      	movs	r3, #0
   d4b80:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b88:	f000 f872 	bl	d4c70 <_ZN8DebounceC1Ev>
   d4b8c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b90:	f000 f86e 	bl	d4c70 <_ZN8DebounceC1Ev>
   d4b94:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b98:	f000 f86a 	bl	d4c70 <_ZN8DebounceC1Ev>
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b005      	add	sp, #20
   d4ba0:	bd30      	pop	{r4, r5, pc}
   d4ba2:	bf00      	nop
   d4ba4:	00061a80 	.word	0x00061a80
   d4ba8:	000186a0 	.word	0x000186a0
   d4bac:	000d7264 	.word	0x000d7264

000d4bb0 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4bb0:	b513      	push	{r0, r1, r4, lr}
   d4bb2:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4bb4:	3050      	adds	r0, #80	; 0x50
   d4bb6:	f000 fed1 	bl	d595c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4bba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bbc:	07d9      	lsls	r1, r3, #31
   d4bbe:	d505      	bpl.n	d4bcc <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4bc0:	2202      	movs	r2, #2
   d4bc2:	2104      	movs	r1, #4
   d4bc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4bc8:	f000 f866 	bl	d4c98 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bce:	079a      	lsls	r2, r3, #30
   d4bd0:	d505      	bpl.n	d4bde <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	2103      	movs	r1, #3
   d4bd6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4bda:	f000 f85d 	bl	d4c98 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4bde:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4be0:	075b      	lsls	r3, r3, #29
   d4be2:	d505      	bpl.n	d4bf0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4be4:	2202      	movs	r2, #2
   d4be6:	4611      	mov	r1, r2
   d4be8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4bec:	f000 f854 	bl	d4c98 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4bf0:	2301      	movs	r3, #1
   d4bf2:	9300      	str	r3, [sp, #0]
   d4bf4:	223c      	movs	r2, #60	; 0x3c
   d4bf6:	2102      	movs	r1, #2
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	f000 fa19 	bl	d5030 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4bfe:	b002      	add	sp, #8
   d4c00:	bd10      	pop	{r4, pc}

000d4c02 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4c02:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4c04:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4c06:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4c08:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4c0a:	d502      	bpl.n	d4c12 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4c0c:	3058      	adds	r0, #88	; 0x58
   d4c0e:	f000 f850 	bl	d4cb2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4c12:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c14:	079a      	lsls	r2, r3, #30
   d4c16:	d503      	bpl.n	d4c20 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4c18:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4c1c:	f000 f849 	bl	d4cb2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4c20:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c22:	075b      	lsls	r3, r3, #29
   d4c24:	d505      	bpl.n	d4c32 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4c26:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4c2e:	f000 b840 	b.w	d4cb2 <_ZN8Debounce6updateEv>
}
   d4c32:	bd10      	pop	{r4, pc}

000d4c34 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d4c34:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d4c36:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d4c38:	f013 0001 	ands.w	r0, r3, #1
   d4c3c:	d003      	beq.n	d4c46 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d4c3e:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d4c42:	f000 b866 	b.w	d4d12 <_ZN8Debounce4fellEv>
}
   d4c46:	4770      	bx	lr

000d4c48 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d4c48:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   d4c4a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d4c4c:	f013 0002 	ands.w	r0, r3, #2
   d4c50:	d003      	beq.n	d4c5a <_ZN16OledWingAdafruit8pressedBEv+0x12>
   d4c52:	f102 0060 	add.w	r0, r2, #96	; 0x60
   d4c56:	f000 b85c 	b.w	d4d12 <_ZN8Debounce4fellEv>
}
   d4c5a:	4770      	bx	lr

000d4c5c <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d4c5c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   d4c5e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d4c60:	f013 0004 	ands.w	r0, r3, #4
   d4c64:	d003      	beq.n	d4c6e <_ZN16OledWingAdafruit8pressedCEv+0x12>
   d4c66:	f102 0068 	add.w	r0, r2, #104	; 0x68
   d4c6a:	f000 b852 	b.w	d4d12 <_ZN8Debounce4fellEv>
}
   d4c6e:	4770      	bx	lr

000d4c70 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4c70:	2100      	movs	r1, #0
   d4c72:	220a      	movs	r2, #10
   d4c74:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4c78:	4770      	bx	lr

000d4c7a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4c7a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4c7c:	b510      	push	{r4, lr}
   d4c7e:	4604      	mov	r4, r0
    this->pin = pin;
   d4c80:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4c82:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4c84:	b288      	uxth	r0, r1
   d4c86:	f001 ff47 	bl	d6b18 <digitalRead>
   d4c8a:	b108      	cbz	r0, d4c90 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4c8c:	2303      	movs	r3, #3
   d4c8e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c90:	f000 fe5c 	bl	d594c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4c94:	6020      	str	r0, [r4, #0]
#endif
}
   d4c96:	bd10      	pop	{r4, pc}

000d4c98 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4c98:	b538      	push	{r3, r4, r5, lr}
   d4c9a:	460c      	mov	r4, r1
   d4c9c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4c9e:	4611      	mov	r1, r2
   d4ca0:	b2a0      	uxth	r0, r4
   d4ca2:	f001 ff0f 	bl	d6ac4 <pinMode>
  
  this->attach(pin);
   d4ca6:	4621      	mov	r1, r4
   d4ca8:	4628      	mov	r0, r5
}
   d4caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4cae:	f7ff bfe4 	b.w	d4c7a <_ZN8Debounce6attachEi>

000d4cb2 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4cb2:	b538      	push	{r3, r4, r5, lr}
   d4cb4:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4cb6:	79c0      	ldrb	r0, [r0, #7]
   d4cb8:	f001 ff2e 	bl	d6b18 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4cbc:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4cbe:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4cc0:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4cc4:	bf18      	it	ne
   d4cc6:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4cc8:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4ccc:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4cce:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4cd0:	d00a      	beq.n	d4ce8 <_ZN8Debounce6updateEv+0x36>
   d4cd2:	f000 fe3b 	bl	d594c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4cd6:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4cd8:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4cda:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4cde:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4ce0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4ce2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4ce6:	bd38      	pop	{r3, r4, r5, pc}
   d4ce8:	f000 fe30 	bl	d594c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4cec:	6823      	ldr	r3, [r4, #0]
   d4cee:	1ac0      	subs	r0, r0, r3
   d4cf0:	88a3      	ldrh	r3, [r4, #4]
   d4cf2:	4298      	cmp	r0, r3
   d4cf4:	d3f4      	bcc.n	d4ce0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4cf6:	79a3      	ldrb	r3, [r4, #6]
   d4cf8:	f003 0301 	and.w	r3, r3, #1
   d4cfc:	42ab      	cmp	r3, r5
   d4cfe:	d0ef      	beq.n	d4ce0 <_ZN8Debounce6updateEv+0x2e>
   d4d00:	f000 fe24 	bl	d594c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4d04:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4d06:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4d08:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4d0c:	f043 0308 	orr.w	r3, r3, #8
   d4d10:	e7e5      	b.n	d4cde <_ZN8Debounce6updateEv+0x2c>

000d4d12 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d4d12:	7980      	ldrb	r0, [r0, #6]
   d4d14:	f000 0009 	and.w	r0, r0, #9
   d4d18:	f1a0 0308 	sub.w	r3, r0, #8
   d4d1c:	4258      	negs	r0, r3
   d4d1e:	4158      	adcs	r0, r3
   d4d20:	4770      	bx	lr
	...

000d4d24 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4d24:	b510      	push	{r4, lr}
   d4d26:	4b04      	ldr	r3, [pc, #16]	; (d4d38 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4d28:	6003      	str	r3, [r0, #0]
   d4d2a:	4604      	mov	r4, r0
  if(buffer) {
   d4d2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d2e:	b108      	cbz	r0, d4d34 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4d30:	f000 fff8 	bl	d5d24 <free>
    buffer = NULL;
  }
}
   d4d34:	4620      	mov	r0, r4
   d4d36:	bd10      	pop	{r4, pc}
   d4d38:	000d7770 	.word	0x000d7770

000d4d3c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	4604      	mov	r4, r0
}
   d4d40:	f7ff fff0 	bl	d4d24 <_ZN16Adafruit_SSD1306D1Ev>
   d4d44:	4620      	mov	r0, r4
   d4d46:	2150      	movs	r1, #80	; 0x50
   d4d48:	f001 ff3f 	bl	d6bca <_ZdlPvj>
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	bd10      	pop	{r4, pc}

000d4d50 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4d50:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d52:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4d54:	db4b      	blt.n	d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d56:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4d5a:	428c      	cmp	r4, r1
   d4d5c:	dd47      	ble.n	d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d5e:	2a00      	cmp	r2, #0
   d4d60:	db45      	blt.n	d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d62:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4d66:	4294      	cmp	r4, r2
   d4d68:	dd41      	ble.n	d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4d6a:	7e84      	ldrb	r4, [r0, #26]
   d4d6c:	2c02      	cmp	r4, #2
   d4d6e:	d01f      	beq.n	d4db0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4d70:	2c03      	cmp	r4, #3
   d4d72:	d026      	beq.n	d4dc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4d74:	2c01      	cmp	r4, #1
   d4d76:	d104      	bne.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4d78:	8904      	ldrh	r4, [r0, #8]
   d4d7a:	43d2      	mvns	r2, r2
   d4d7c:	4414      	add	r4, r2
      break;
   d4d7e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4d80:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4d82:	2b01      	cmp	r3, #1
   d4d84:	d023      	beq.n	d4dce <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4d86:	2b02      	cmp	r3, #2
   d4d88:	d032      	beq.n	d4df0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4d8a:	bb83      	cbnz	r3, d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4d8c:	2a00      	cmp	r2, #0
   d4d8e:	4613      	mov	r3, r2
   d4d90:	8904      	ldrh	r4, [r0, #8]
   d4d92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d94:	bfb8      	it	lt
   d4d96:	1dd3      	addlt	r3, r2, #7
   d4d98:	10db      	asrs	r3, r3, #3
   d4d9a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d9e:	f002 0207 	and.w	r2, r2, #7
   d4da2:	2301      	movs	r3, #1
   d4da4:	4093      	lsls	r3, r2
   d4da6:	5c42      	ldrb	r2, [r0, r1]
   d4da8:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4dac:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4dae:	e01e      	b.n	d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4db0:	8904      	ldrh	r4, [r0, #8]
   d4db2:	43c9      	mvns	r1, r1
   d4db4:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4db6:	8944      	ldrh	r4, [r0, #10]
   d4db8:	43d2      	mvns	r2, r2
   d4dba:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4dbc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4dbe:	b212      	sxth	r2, r2
      break;
   d4dc0:	e7df      	b.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4dc2:	8944      	ldrh	r4, [r0, #10]
   d4dc4:	43c9      	mvns	r1, r1
   d4dc6:	440c      	add	r4, r1
      break;
   d4dc8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4dca:	b222      	sxth	r2, r4
      break;
   d4dcc:	e7d9      	b.n	d4d82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4dce:	2a00      	cmp	r2, #0
   d4dd0:	8904      	ldrh	r4, [r0, #8]
   d4dd2:	4613      	mov	r3, r2
   d4dd4:	bfb8      	it	lt
   d4dd6:	1dd3      	addlt	r3, r2, #7
   d4dd8:	10db      	asrs	r3, r3, #3
   d4dda:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4dde:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4de0:	f002 0007 	and.w	r0, r2, #7
   d4de4:	2201      	movs	r2, #1
   d4de6:	4082      	lsls	r2, r0
   d4de8:	5c58      	ldrb	r0, [r3, r1]
   d4dea:	4302      	orrs	r2, r0
   d4dec:	545a      	strb	r2, [r3, r1]
}
   d4dee:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4df0:	2a00      	cmp	r2, #0
   d4df2:	4613      	mov	r3, r2
   d4df4:	8904      	ldrh	r4, [r0, #8]
   d4df6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4df8:	bfb8      	it	lt
   d4dfa:	1dd3      	addlt	r3, r2, #7
   d4dfc:	10db      	asrs	r3, r3, #3
   d4dfe:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e02:	f002 0207 	and.w	r2, r2, #7
   d4e06:	2301      	movs	r3, #1
   d4e08:	fa03 f202 	lsl.w	r2, r3, r2
   d4e0c:	5c43      	ldrb	r3, [r0, r1]
   d4e0e:	405a      	eors	r2, r3
   d4e10:	e7cc      	b.n	d4dac <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4e12 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e12:	b510      	push	{r4, lr}
   d4e14:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4e16:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4e1a:	2101      	movs	r1, #1
   d4e1c:	b280      	uxth	r0, r0
   d4e1e:	f001 fe62 	bl	d6ae6 <digitalWrite>
   d4e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e24:	b118      	cbz	r0, d4e2e <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4e2a:	f000 bffa 	b.w	d5e22 <_ZN8SPIClass14endTransactionEv>
}
   d4e2e:	bd10      	pop	{r4, pc}

000d4e30 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4e30:	b570      	push	{r4, r5, r6, lr}
   d4e32:	4604      	mov	r4, r0
   d4e34:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4e36:	2600      	movs	r6, #0
   d4e38:	f7ff fc12 	bl	d4660 <_ZN12Adafruit_GFXC1Ess>
   d4e3c:	4b11      	ldr	r3, [pc, #68]	; (d4e84 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4e3e:	6023      	str	r3, [r4, #0]
   d4e40:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4e42:	b915      	cbnz	r5, d4e4a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4e44:	f001 fe94 	bl	d6b70 <_Z19__fetch_global_Wirev>
   d4e48:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4e4a:	23ff      	movs	r3, #255	; 0xff
   d4e4c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4e50:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4e54:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4e58:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4e5c:	4b0a      	ldr	r3, [pc, #40]	; (d4e88 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4e5e:	63a3      	str	r3, [r4, #56]	; 0x38
   d4e60:	2301      	movs	r3, #1
   d4e62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4e66:	9b05      	ldr	r3, [sp, #20]
   d4e68:	64a3      	str	r3, [r4, #72]	; 0x48
   d4e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e6e:	9b06      	ldr	r3, [sp, #24]
   d4e70:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4e72:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4e76:	6426      	str	r6, [r4, #64]	; 0x40
   d4e78:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4e7c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4e7e:	4620      	mov	r0, r4
   d4e80:	bd70      	pop	{r4, r5, r6, pc}
   d4e82:	bf00      	nop
   d4e84:	000d7770 	.word	0x000d7770
   d4e88:	000d72bc 	.word	0x000d72bc

000d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e8e:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e90:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4e92:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e94:	b190      	cbz	r0, d4ebc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4e96:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e9a:	f001 fcdd 	bl	d6858 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ea0:	6803      	ldr	r3, [r0, #0]
   d4ea2:	2100      	movs	r1, #0
   d4ea4:	689b      	ldr	r3, [r3, #8]
   d4ea6:	4798      	blx	r3
    WIRE_WRITE(c);
   d4ea8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4eaa:	6803      	ldr	r3, [r0, #0]
   d4eac:	4629      	mov	r1, r5
   d4eae:	689b      	ldr	r3, [r3, #8]
   d4eb0:	4798      	blx	r3
    wire->endTransmission();
   d4eb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4eb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4eb8:	f001 bcd5 	b.w	d6866 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4ebc:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4ec0:	4601      	mov	r1, r0
   d4ec2:	b298      	uxth	r0, r3
   d4ec4:	f001 fe0f 	bl	d6ae6 <digitalWrite>
  if(spi) {
   d4ec8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4eca:	b120      	cbz	r0, d4ed6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4ecc:	4629      	mov	r1, r5
}
   d4ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4ed2:	f001 b82d 	b.w	d5f30 <_ZN8SPIClass8transferEh>
   d4ed6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4ed8:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4eda:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4ede:	ea05 0107 	and.w	r1, r5, r7
   d4ee2:	b280      	uxth	r0, r0
   d4ee4:	f001 fdff 	bl	d6ae6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4ee8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4eec:	2101      	movs	r1, #1
   d4eee:	b280      	uxth	r0, r0
   d4ef0:	f001 fdf9 	bl	d6ae6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4ef4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ef8:	2100      	movs	r1, #0
   d4efa:	b280      	uxth	r0, r0
   d4efc:	f001 fdf3 	bl	d6ae6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f00:	3e01      	subs	r6, #1
   d4f02:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4f06:	d1e8      	bne.n	d4eda <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f0a <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4f0a:	b538      	push	{r3, r4, r5, lr}
   d4f0c:	4604      	mov	r4, r0
  TRANSACTION_START
   d4f0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4f10:	460d      	mov	r5, r1
  TRANSACTION_START
   d4f12:	b180      	cbz	r0, d4f36 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4f14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4f16:	f001 fc65 	bl	d67e4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4f1a:	2d00      	cmp	r5, #0
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	bf14      	ite	ne
   d4f20:	21a7      	movne	r1, #167	; 0xa7
   d4f22:	21a6      	moveq	r1, #166	; 0xa6
   d4f24:	f7ff ffb2 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4f28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f2a:	b188      	cbz	r0, d4f50 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4f2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f32:	f001 bc57 	b.w	d67e4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4f36:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f38:	b118      	cbz	r0, d4f42 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4f3a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4f3e:	f000 ff89 	bl	d5e54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4f42:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4f46:	2100      	movs	r1, #0
   d4f48:	b280      	uxth	r0, r0
   d4f4a:	f001 fdcc 	bl	d6ae6 <digitalWrite>
   d4f4e:	e7e4      	b.n	d4f1a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4f50:	4620      	mov	r0, r4
}
   d4f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f56:	f7ff bf5c 	b.w	d4e12 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4f5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f5e:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4f60:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4f62:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4f64:	188f      	adds	r7, r1, r2
   d4f66:	b340      	cbz	r0, d4fba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4f68:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f6c:	f001 fc74 	bl	d6858 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f72:	6803      	ldr	r3, [r0, #0]
   d4f74:	2100      	movs	r1, #0
   d4f76:	689b      	ldr	r3, [r3, #8]
   d4f78:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4f7a:	2601      	movs	r6, #1
    while(n--) {
   d4f7c:	42bd      	cmp	r5, r7
   d4f7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f80:	d017      	beq.n	d4fb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4f82:	2e1f      	cmp	r6, #31
   d4f84:	d90c      	bls.n	d4fa0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4f86:	f001 fc6e 	bl	d6866 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4f8a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f90:	f001 fc62 	bl	d6858 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f96:	6803      	ldr	r3, [r0, #0]
   d4f98:	2100      	movs	r1, #0
   d4f9a:	689b      	ldr	r3, [r3, #8]
   d4f9c:	4798      	blx	r3
        bytesOut = 1;
   d4f9e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4fa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fa2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fa6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4fa8:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4faa:	689b      	ldr	r3, [r3, #8]
   d4fac:	4798      	blx	r3
      bytesOut++;
   d4fae:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4fb0:	e7e4      	b.n	d4f7c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4fb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4fb6:	f001 bc56 	b.w	d6866 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4fba:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4fbe:	4601      	mov	r1, r0
   d4fc0:	b298      	uxth	r0, r3
   d4fc2:	f001 fd90 	bl	d6ae6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4fc6:	42af      	cmp	r7, r5
   d4fc8:	d022      	beq.n	d5010 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4fca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4fcc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4fd0:	b118      	cbz	r0, d4fda <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4fd2:	4649      	mov	r1, r9
   d4fd4:	f000 ffac 	bl	d5f30 <_ZN8SPIClass8transferEh>
   d4fd8:	e7f5      	b.n	d4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4fda:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4fdc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4fe0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4fe4:	ea09 0108 	and.w	r1, r9, r8
   d4fe8:	b280      	uxth	r0, r0
   d4fea:	f001 fd7c 	bl	d6ae6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4fee:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ff2:	2101      	movs	r1, #1
   d4ff4:	b280      	uxth	r0, r0
   d4ff6:	f001 fd76 	bl	d6ae6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4ffa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ffe:	2100      	movs	r1, #0
   d5000:	b280      	uxth	r0, r0
   d5002:	f001 fd70 	bl	d6ae6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5006:	3e01      	subs	r6, #1
   d5008:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d500c:	d1e8      	bne.n	d4fe0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d500e:	e7da      	b.n	d4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d5014:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5018:	1dda      	adds	r2, r3, #7
   d501a:	bf48      	it	mi
   d501c:	f103 020e 	addmi.w	r2, r3, #14
   d5020:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5024:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5026:	10d2      	asrs	r2, r2, #3
   d5028:	435a      	muls	r2, r3
   d502a:	2100      	movs	r1, #0
   d502c:	f001 bdee 	b.w	d6c0c <memset>

000d5030 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d5030:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5034:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5036:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5038:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d503c:	4604      	mov	r4, r0
   d503e:	460f      	mov	r7, r1
   d5040:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5042:	b1b3      	cbz	r3, d5072 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d5044:	4620      	mov	r0, r4
   d5046:	f7ff ffe5 	bl	d5014 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d504a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d504e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d5052:	2820      	cmp	r0, #32
   d5054:	dc1f      	bgt.n	d5096 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5056:	2320      	movs	r3, #32
   d5058:	2201      	movs	r2, #1
   d505a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d505e:	3820      	subs	r0, #32
   d5060:	2373      	movs	r3, #115	; 0x73
   d5062:	3973      	subs	r1, #115	; 0x73
   d5064:	9300      	str	r3, [sp, #0]
   d5066:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d506a:	4b89      	ldr	r3, [pc, #548]	; (d5290 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d506c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5070:	e01f      	b.n	d50b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5072:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5076:	1dd8      	adds	r0, r3, #7
   d5078:	bf48      	it	mi
   d507a:	f103 000e 	addmi.w	r0, r3, #14
   d507e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d5082:	10c0      	asrs	r0, r0, #3
   d5084:	4358      	muls	r0, r3
   d5086:	f000 fe45 	bl	d5d14 <malloc>
   d508a:	62e0      	str	r0, [r4, #44]	; 0x2c
   d508c:	2800      	cmp	r0, #0
   d508e:	d1d9      	bne.n	d5044 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5090:	b004      	add	sp, #16
   d5092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5096:	2340      	movs	r3, #64	; 0x40
   d5098:	f04f 0c01 	mov.w	ip, #1
   d509c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d50a0:	2352      	movs	r3, #82	; 0x52
   d50a2:	3840      	subs	r0, #64	; 0x40
   d50a4:	3952      	subs	r1, #82	; 0x52
   d50a6:	9300      	str	r3, [sp, #0]
   d50a8:	4b7a      	ldr	r3, [pc, #488]	; (d5294 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d50aa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d50ae:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d50b2:	f340 024f 	sbfx	r2, r0, #1, #16
   d50b6:	f341 014f 	sbfx	r1, r1, #1, #16
   d50ba:	4620      	mov	r0, r4
   d50bc:	f7ff fae6 	bl	d468c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d50c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d50c2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d50c6:	2800      	cmp	r0, #0
   d50c8:	d078      	beq.n	d51bc <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d50ca:	2d00      	cmp	r5, #0
   d50cc:	d174      	bne.n	d51b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d50ce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d50d2:	2b20      	cmp	r3, #32
   d50d4:	bf0c      	ite	eq
   d50d6:	253c      	moveq	r5, #60	; 0x3c
   d50d8:	253d      	movne	r5, #61	; 0x3d
   d50da:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d50de:	f1b8 0f00 	cmp.w	r8, #0
   d50e2:	d001      	beq.n	d50e8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d50e4:	f001 fb82 	bl	d67ec <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d50e8:	b1fe      	cbz	r6, d512a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d50ea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d50ee:	2800      	cmp	r0, #0
   d50f0:	db1b      	blt.n	d512a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d50f2:	2101      	movs	r1, #1
   d50f4:	b280      	uxth	r0, r0
   d50f6:	f001 fce5 	bl	d6ac4 <pinMode>
    digitalWrite(rstPin, HIGH);
   d50fa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d50fe:	2101      	movs	r1, #1
   d5100:	b280      	uxth	r0, r0
   d5102:	f001 fcf0 	bl	d6ae6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5106:	2001      	movs	r0, #1
   d5108:	f001 f908 	bl	d631c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d510c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5110:	2100      	movs	r1, #0
   d5112:	b280      	uxth	r0, r0
   d5114:	f001 fce7 	bl	d6ae6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5118:	200a      	movs	r0, #10
   d511a:	f001 f8ff 	bl	d631c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d511e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5122:	2101      	movs	r1, #1
   d5124:	b280      	uxth	r0, r0
   d5126:	f001 fcde 	bl	d6ae6 <digitalWrite>
  TRANSACTION_START
   d512a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d512c:	2800      	cmp	r0, #0
   d512e:	d074      	beq.n	d521a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5132:	f001 fb57 	bl	d67e4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d5136:	2204      	movs	r2, #4
   d5138:	4957      	ldr	r1, [pc, #348]	; (d5298 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d513a:	4620      	mov	r0, r4
   d513c:	f7ff ff0d 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5140:	7aa1      	ldrb	r1, [r4, #10]
   d5142:	3901      	subs	r1, #1
   d5144:	b2c9      	uxtb	r1, r1
   d5146:	4620      	mov	r0, r4
   d5148:	f7ff fea0 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d514c:	4953      	ldr	r1, [pc, #332]	; (d529c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d514e:	2204      	movs	r2, #4
   d5150:	4620      	mov	r0, r4
   d5152:	f7ff ff02 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d5156:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d515a:	2b01      	cmp	r3, #1
   d515c:	bf0c      	ite	eq
   d515e:	2110      	moveq	r1, #16
   d5160:	2114      	movne	r1, #20
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff fe92 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5168:	2204      	movs	r2, #4
   d516a:	494d      	ldr	r1, [pc, #308]	; (d52a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d516c:	4620      	mov	r0, r4
   d516e:	f7ff fef4 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d5172:	68a3      	ldr	r3, [r4, #8]
   d5174:	4a4b      	ldr	r2, [pc, #300]	; (d52a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d5176:	4293      	cmp	r3, r2
   d5178:	d15c      	bne.n	d5234 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d517a:	494b      	ldr	r1, [pc, #300]	; (d52a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d517c:	2204      	movs	r2, #4
   d517e:	4620      	mov	r0, r4
   d5180:	f7ff feeb 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5184:	21d9      	movs	r1, #217	; 0xd9
   d5186:	4620      	mov	r0, r4
   d5188:	f7ff fe80 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d518c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5190:	2b01      	cmp	r3, #1
   d5192:	bf0c      	ite	eq
   d5194:	2122      	moveq	r1, #34	; 0x22
   d5196:	21f1      	movne	r1, #241	; 0xf1
   d5198:	4620      	mov	r0, r4
   d519a:	f7ff fe77 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d519e:	4620      	mov	r0, r4
   d51a0:	4942      	ldr	r1, [pc, #264]	; (d52ac <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d51a2:	2206      	movs	r2, #6
   d51a4:	f7ff fed9 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d51a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51aa:	2800      	cmp	r0, #0
   d51ac:	d063      	beq.n	d5276 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d51ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d51b0:	f001 fb18 	bl	d67e4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d51b4:	2001      	movs	r0, #1
   d51b6:	e76b      	b.n	d5090 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d51b8:	b26d      	sxtb	r5, r5
   d51ba:	e78e      	b.n	d50da <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d51bc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d51c0:	2101      	movs	r1, #1
   d51c2:	b280      	uxth	r0, r0
   d51c4:	f001 fc7e 	bl	d6ac4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d51c8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d51cc:	2101      	movs	r1, #1
   d51ce:	b280      	uxth	r0, r0
   d51d0:	f001 fc78 	bl	d6ac4 <pinMode>
    SSD1306_DESELECT
   d51d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d51d8:	2101      	movs	r1, #1
   d51da:	b280      	uxth	r0, r0
   d51dc:	f001 fc83 	bl	d6ae6 <digitalWrite>
    if(spi) { // Hardware SPI
   d51e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d51e2:	b13d      	cbz	r5, d51f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d51e4:	f1b8 0f00 	cmp.w	r8, #0
   d51e8:	f43f af7e 	beq.w	d50e8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d51ec:	4628      	mov	r0, r5
   d51ee:	f000 fe07 	bl	d5e00 <_ZN8SPIClass5beginEv>
   d51f2:	e779      	b.n	d50e8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d51f4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d51f8:	2101      	movs	r1, #1
   d51fa:	b280      	uxth	r0, r0
   d51fc:	f001 fc62 	bl	d6ac4 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5200:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5204:	2101      	movs	r1, #1
   d5206:	b280      	uxth	r0, r0
   d5208:	f001 fc5c 	bl	d6ac4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d520c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5210:	4629      	mov	r1, r5
   d5212:	b280      	uxth	r0, r0
   d5214:	f001 fc67 	bl	d6ae6 <digitalWrite>
   d5218:	e766      	b.n	d50e8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d521a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d521c:	b118      	cbz	r0, d5226 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d521e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5222:	f000 fe17 	bl	d5e54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5226:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d522a:	2100      	movs	r1, #0
   d522c:	b280      	uxth	r0, r0
   d522e:	f001 fc5a 	bl	d6ae6 <digitalWrite>
   d5232:	e780      	b.n	d5136 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5234:	4a1e      	ldr	r2, [pc, #120]	; (d52b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5236:	4293      	cmp	r3, r2
   d5238:	d10e      	bne.n	d5258 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d523a:	491e      	ldr	r1, [pc, #120]	; (d52b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d523c:	2203      	movs	r2, #3
   d523e:	4620      	mov	r0, r4
   d5240:	f7ff fe8b 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5244:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5248:	2b01      	cmp	r3, #1
   d524a:	bf0c      	ite	eq
   d524c:	219f      	moveq	r1, #159	; 0x9f
   d524e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5250:	4620      	mov	r0, r4
   d5252:	f7ff fe1b 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5256:	e795      	b.n	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5258:	4a17      	ldr	r2, [pc, #92]	; (d52b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d525a:	4293      	cmp	r3, r2
   d525c:	d192      	bne.n	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d525e:	4917      	ldr	r1, [pc, #92]	; (d52bc <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5260:	2203      	movs	r2, #3
   d5262:	4620      	mov	r0, r4
   d5264:	f7ff fe79 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5268:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d526c:	2b01      	cmp	r3, #1
   d526e:	bf0c      	ite	eq
   d5270:	2110      	moveq	r1, #16
   d5272:	21af      	movne	r1, #175	; 0xaf
   d5274:	e7ec      	b.n	d5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5276:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d527a:	2101      	movs	r1, #1
   d527c:	b280      	uxth	r0, r0
   d527e:	f001 fc32 	bl	d6ae6 <digitalWrite>
   d5282:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5284:	2800      	cmp	r0, #0
   d5286:	d095      	beq.n	d51b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5288:	f000 fdcb 	bl	d5e22 <_ZN8SPIClass14endTransactionEv>
   d528c:	e792      	b.n	d51b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d528e:	bf00      	nop
   d5290:	000d7588 	.word	0x000d7588
   d5294:	000d72c8 	.word	0x000d72c8
   d5298:	000d77d0 	.word	0x000d77d0
   d529c:	000d77d4 	.word	0x000d77d4
   d52a0:	000d77d8 	.word	0x000d77d8
   d52a4:	00200080 	.word	0x00200080
   d52a8:	000d77e2 	.word	0x000d77e2
   d52ac:	000d77dc 	.word	0x000d77dc
   d52b0:	00400080 	.word	0x00400080
   d52b4:	000d77e6 	.word	0x000d77e6
   d52b8:	00100060 	.word	0x00100060
   d52bc:	000d77e9 	.word	0x000d77e9

000d52c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d52c0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d52c2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d52c4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d52c8:	db3d      	blt.n	d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d52ca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d52ce:	4294      	cmp	r4, r2
   d52d0:	dd39      	ble.n	d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d52d2:	2900      	cmp	r1, #0
      w += x;
   d52d4:	bfbe      	ittt	lt
   d52d6:	185b      	addlt	r3, r3, r1
   d52d8:	b21b      	sxthlt	r3, r3
      x  = 0;
   d52da:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d52dc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d52e0:	18ce      	adds	r6, r1, r3
   d52e2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d52e4:	bfc4      	itt	gt
   d52e6:	1a63      	subgt	r3, r4, r1
   d52e8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d52ea:	2b00      	cmp	r3, #0
   d52ec:	dd2b      	ble.n	d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d52ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d52f0:	10d6      	asrs	r6, r2, #3
   d52f2:	fb14 1106 	smlabb	r1, r4, r6, r1
   d52f6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d52f8:	f002 0007 	and.w	r0, r2, #7
   d52fc:	2201      	movs	r2, #1
   d52fe:	4082      	lsls	r2, r0
      switch(color) {
   d5300:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5302:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5304:	d016      	beq.n	d5334 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5306:	2d02      	cmp	r5, #2
   d5308:	d00b      	beq.n	d5322 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d530a:	b9e5      	cbnz	r5, d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d530c:	43d2      	mvns	r2, r2
   d530e:	b2d2      	uxtb	r2, r2
   d5310:	440b      	add	r3, r1
   d5312:	4299      	cmp	r1, r3
   d5314:	d017      	beq.n	d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5316:	f811 0b01 	ldrb.w	r0, [r1], #1
   d531a:	4010      	ands	r0, r2
   d531c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5320:	e7f7      	b.n	d5312 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5322:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5324:	4299      	cmp	r1, r3
   d5326:	d00e      	beq.n	d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5328:	f811 0b01 	ldrb.w	r0, [r1], #1
   d532c:	4050      	eors	r0, r2
   d532e:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5332:	e7f7      	b.n	d5324 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5334:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5336:	4299      	cmp	r1, r3
   d5338:	d005      	beq.n	d5346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d533a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d533e:	4310      	orrs	r0, r2
   d5340:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5344:	e7f7      	b.n	d5336 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5346:	bd70      	pop	{r4, r5, r6, pc}

000d5348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5348:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d534a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d534c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5350:	db76      	blt.n	d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5352:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5356:	42a9      	cmp	r1, r5
   d5358:	da72      	bge.n	d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d535a:	2a00      	cmp	r2, #0
      __h += __y;
   d535c:	bfbc      	itt	lt
   d535e:	18d2      	addlt	r2, r2, r3
   d5360:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5362:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5366:	bfb8      	it	lt
   d5368:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d536a:	18d7      	adds	r7, r2, r3
   d536c:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d536e:	bfc4      	itt	gt
   d5370:	1aa3      	subgt	r3, r4, r2
   d5372:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5374:	2b00      	cmp	r3, #0
   d5376:	dd63      	ble.n	d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5378:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d537c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d537e:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5382:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5386:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5388:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d538c:	d023      	beq.n	d53d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d538e:	f1c2 0208 	rsb	r2, r2, #8
   d5392:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5394:	4d2c      	ldr	r5, [pc, #176]	; (d5448 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5396:	4293      	cmp	r3, r2
   d5398:	bf3c      	itt	cc
   d539a:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d539e:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d53a2:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d53a4:	bf3c      	itt	cc
   d53a6:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d53aa:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d53ae:	2e01      	cmp	r6, #1
   d53b0:	d007      	beq.n	d53c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d53b2:	2e02      	cmp	r6, #2
   d53b4:	d02e      	beq.n	d5414 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d53b6:	b94e      	cbnz	r6, d53cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d53b8:	f817 c001 	ldrb.w	ip, [r7, r1]
   d53bc:	ea2c 0505 	bic.w	r5, ip, r5
   d53c0:	e003      	b.n	d53ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d53c2:	f817 c001 	ldrb.w	ip, [r7, r1]
   d53c6:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d53ca:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d53cc:	4293      	cmp	r3, r2
   d53ce:	d337      	bcc.n	d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d53d0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d53d4:	440c      	add	r4, r1
        h -= mod;
   d53d6:	1a9a      	subs	r2, r3, r2
   d53d8:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d53da:	2a07      	cmp	r2, #7
   d53dc:	d90e      	bls.n	d53fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d53de:	2e02      	cmp	r6, #2
   d53e0:	d11d      	bne.n	d541e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d53e2:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d53e4:	7821      	ldrb	r1, [r4, #0]
   d53e6:	43c9      	mvns	r1, r1
   d53e8:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d53ea:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d53ec:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d53f0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d53f2:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d53f4:	440c      	add	r4, r1
            } while(h >= 8);
   d53f6:	d8f5      	bhi.n	d53e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d53f8:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d53fc:	b302      	cbz	r2, d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d53fe:	4b13      	ldr	r3, [pc, #76]	; (d544c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5400:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5402:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5404:	d019      	beq.n	d543a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5406:	2e02      	cmp	r6, #2
   d5408:	d01b      	beq.n	d5442 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d540a:	b9ce      	cbnz	r6, d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d540c:	7822      	ldrb	r2, [r4, #0]
   d540e:	ea22 0303 	bic.w	r3, r2, r3
   d5412:	e014      	b.n	d543e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5414:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5418:	ea85 050c 	eor.w	r5, r5, ip
   d541c:	e7d5      	b.n	d53ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d541e:	2e00      	cmp	r6, #0
   d5420:	bf14      	ite	ne
   d5422:	25ff      	movne	r5, #255	; 0xff
   d5424:	2500      	moveq	r5, #0
   d5426:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5428:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d542a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d542c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5430:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5432:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5434:	440c      	add	r4, r1
            } while(h >= 8);
   d5436:	d8f7      	bhi.n	d5428 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5438:	e7de      	b.n	d53f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d543a:	7822      	ldrb	r2, [r4, #0]
   d543c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d543e:	7023      	strb	r3, [r4, #0]
}
   d5440:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5442:	7822      	ldrb	r2, [r4, #0]
   d5444:	4053      	eors	r3, r2
   d5446:	e7fa      	b.n	d543e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5448:	000d77c0 	.word	0x000d77c0
   d544c:	000d77c8 	.word	0x000d77c8

000d5450 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5450:	b470      	push	{r4, r5, r6}
   d5452:	4614      	mov	r4, r2
  switch(rotation) {
   d5454:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5456:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d545a:	2a02      	cmp	r2, #2
   d545c:	d00d      	beq.n	d547a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d545e:	2a03      	cmp	r2, #3
   d5460:	d018      	beq.n	d5494 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5462:	2a01      	cmp	r2, #1
   d5464:	d111      	bne.n	d548a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5466:	8902      	ldrh	r2, [r0, #8]
   d5468:	43e4      	mvns	r4, r4
   d546a:	4414      	add	r4, r2
   d546c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d546e:	9603      	str	r6, [sp, #12]
   d5470:	460a      	mov	r2, r1
   d5472:	4621      	mov	r1, r4
}
   d5474:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5476:	f7ff bf67 	b.w	d5348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d547a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d547c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d547e:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5480:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5482:	4414      	add	r4, r2
    x -= (w-1);
   d5484:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5486:	b224      	sxth	r4, r4
    x -= (w-1);
   d5488:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d548a:	9603      	str	r6, [sp, #12]
   d548c:	4622      	mov	r2, r4
}
   d548e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5490:	f7ff bf16 	b.w	d52c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5494:	8945      	ldrh	r5, [r0, #10]
   d5496:	4419      	add	r1, r3
   d5498:	1a69      	subs	r1, r5, r1
   d549a:	b209      	sxth	r1, r1
    break;
   d549c:	e7e7      	b.n	d546e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d549e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d549e:	b430      	push	{r4, r5}
   d54a0:	4614      	mov	r4, r2
  switch(rotation) {
   d54a2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d54a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d54a8:	2a02      	cmp	r2, #2
   d54aa:	d00d      	beq.n	d54c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d54ac:	2a03      	cmp	r2, #3
   d54ae:	d018      	beq.n	d54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d54b0:	2a01      	cmp	r2, #1
   d54b2:	d111      	bne.n	d54d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d54b4:	18e2      	adds	r2, r4, r3
   d54b6:	8904      	ldrh	r4, [r0, #8]
   d54b8:	1aa4      	subs	r4, r4, r2
   d54ba:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d54bc:	9502      	str	r5, [sp, #8]
   d54be:	460a      	mov	r2, r1
   d54c0:	4621      	mov	r1, r4
}
   d54c2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d54c4:	f7ff befc 	b.w	d52c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d54c8:	8902      	ldrh	r2, [r0, #8]
   d54ca:	43c9      	mvns	r1, r1
   d54cc:	4411      	add	r1, r2
    y -= (h-1);
   d54ce:	18e2      	adds	r2, r4, r3
   d54d0:	8944      	ldrh	r4, [r0, #10]
   d54d2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d54d4:	b209      	sxth	r1, r1
    y -= (h-1);
   d54d6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d54d8:	9502      	str	r5, [sp, #8]
   d54da:	4622      	mov	r2, r4
}
   d54dc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d54de:	f7ff bf33 	b.w	d5348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d54e2:	8942      	ldrh	r2, [r0, #10]
   d54e4:	43c9      	mvns	r1, r1
   d54e6:	4411      	add	r1, r2
   d54e8:	b209      	sxth	r1, r1
    break;
   d54ea:	e7e7      	b.n	d54bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d54ec <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d54ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d54f0:	4604      	mov	r4, r0
  TRANSACTION_START
   d54f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d54f4:	2800      	cmp	r0, #0
   d54f6:	d042      	beq.n	d557e <_ZN16Adafruit_SSD13067displayEv+0x92>
   d54f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d54fa:	f001 f973 	bl	d67e4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d54fe:	4947      	ldr	r1, [pc, #284]	; (d561c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5500:	2205      	movs	r2, #5
   d5502:	4620      	mov	r0, r4
   d5504:	f7ff fd29 	bl	d4f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5508:	7a21      	ldrb	r1, [r4, #8]
   d550a:	3901      	subs	r1, #1
   d550c:	4620      	mov	r0, r4
   d550e:	b2c9      	uxtb	r1, r1
   d5510:	f7ff fcbc 	bl	d4e8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5514:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5518:	1dde      	adds	r6, r3, #7
   d551a:	bf48      	it	mi
   d551c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5520:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5524:	8923      	ldrh	r3, [r4, #8]
   d5526:	10f6      	asrs	r6, r6, #3
   d5528:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d552c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5530:	2800      	cmp	r0, #0
   d5532:	d03a      	beq.n	d55aa <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5534:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5538:	f001 f98e 	bl	d6858 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d553c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d553e:	6803      	ldr	r3, [r0, #0]
   d5540:	2140      	movs	r1, #64	; 0x40
   d5542:	689b      	ldr	r3, [r3, #8]
   d5544:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5546:	2701      	movs	r7, #1
    while(count--) {
   d5548:	42b5      	cmp	r5, r6
   d554a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d554c:	d024      	beq.n	d5598 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d554e:	2f1f      	cmp	r7, #31
   d5550:	d90c      	bls.n	d556c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5552:	f001 f988 	bl	d6866 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5556:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d555a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d555c:	f001 f97c 	bl	d6858 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5560:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5562:	6803      	ldr	r3, [r0, #0]
   d5564:	2140      	movs	r1, #64	; 0x40
   d5566:	689b      	ldr	r3, [r3, #8]
   d5568:	4798      	blx	r3
        bytesOut = 1;
   d556a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d556c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d556e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5572:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5574:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5576:	689b      	ldr	r3, [r3, #8]
   d5578:	4798      	blx	r3
      bytesOut++;
   d557a:	b2ff      	uxtb	r7, r7
    while(count--) {
   d557c:	e7e4      	b.n	d5548 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d557e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5580:	b118      	cbz	r0, d558a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5582:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5586:	f000 fc65 	bl	d5e54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d558a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d558e:	2100      	movs	r1, #0
   d5590:	b280      	uxth	r0, r0
   d5592:	f001 faa8 	bl	d6ae6 <digitalWrite>
   d5596:	e7b2      	b.n	d54fe <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5598:	f001 f965 	bl	d6866 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d559c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d559e:	b378      	cbz	r0, d5600 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d55a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d55a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d55a6:	f001 b91d 	b.w	d67e4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d55aa:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d55ae:	2101      	movs	r1, #1
   d55b0:	b280      	uxth	r0, r0
   d55b2:	f001 fa98 	bl	d6ae6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d55b6:	42b5      	cmp	r5, r6
   d55b8:	d0f0      	beq.n	d559c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d55ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d55bc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d55c0:	b118      	cbz	r0, d55ca <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d55c2:	4649      	mov	r1, r9
   d55c4:	f000 fcb4 	bl	d5f30 <_ZN8SPIClass8transferEh>
   d55c8:	e7f5      	b.n	d55b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d55ca:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d55cc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d55d0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d55d4:	ea09 0108 	and.w	r1, r9, r8
   d55d8:	b280      	uxth	r0, r0
   d55da:	f001 fa84 	bl	d6ae6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d55de:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d55e2:	2101      	movs	r1, #1
   d55e4:	b280      	uxth	r0, r0
   d55e6:	f001 fa7e 	bl	d6ae6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d55ea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d55ee:	2100      	movs	r1, #0
   d55f0:	b280      	uxth	r0, r0
   d55f2:	f001 fa78 	bl	d6ae6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d55f6:	3f01      	subs	r7, #1
   d55f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d55fc:	d1e8      	bne.n	d55d0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d55fe:	e7da      	b.n	d55b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5600:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5604:	2101      	movs	r1, #1
   d5606:	b280      	uxth	r0, r0
   d5608:	f001 fa6d 	bl	d6ae6 <digitalWrite>
   d560c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d560e:	b118      	cbz	r0, d5618 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5610:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5614:	f000 bc05 	b.w	d5e22 <_ZN8SPIClass14endTransactionEv>
}
   d5618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d561c:	000d77ec 	.word	0x000d77ec

000d5620 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5620:	6803      	ldr	r3, [r0, #0]
   d5622:	b2c9      	uxtb	r1, r1
   d5624:	689b      	ldr	r3, [r3, #8]
   d5626:	4718      	bx	r3

000d5628 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   d5628:	4770      	bx	lr

000d562a <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   d562a:	b510      	push	{r4, lr}
   d562c:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   d562e:	2160      	movs	r1, #96	; 0x60
   d5630:	6800      	ldr	r0, [r0, #0]
   d5632:	f001 f90d 	bl	d6850 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   d5636:	6820      	ldr	r0, [r4, #0]
   d5638:	f001 f915 	bl	d6866 <_ZN7TwoWire15endTransmissionEv>
}
   d563c:	fab0 f080 	clz	r0, r0
   d5640:	0940      	lsrs	r0, r0, #5
   d5642:	bd10      	pop	{r4, pc}

000d5644 <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   d5644:	b538      	push	{r3, r4, r5, lr}
   d5646:	4605      	mov	r5, r0
   d5648:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d564a:	6800      	ldr	r0, [r0, #0]
   d564c:	2160      	movs	r1, #96	; 0x60
   d564e:	f001 f8ff 	bl	d6850 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d5652:	6828      	ldr	r0, [r5, #0]
   d5654:	6803      	ldr	r3, [r0, #0]
   d5656:	4621      	mov	r1, r4
   d5658:	689b      	ldr	r3, [r3, #8]
   d565a:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d565c:	6828      	ldr	r0, [r5, #0]
   d565e:	2100      	movs	r1, #0
   d5660:	f001 f8fd 	bl	d685e <_ZN7TwoWire15endTransmissionEh>
   d5664:	b108      	cbz	r0, d566a <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   d5666:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   d5668:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   d566a:	6828      	ldr	r0, [r5, #0]
   d566c:	2202      	movs	r2, #2
   d566e:	2160      	movs	r1, #96	; 0x60
   d5670:	f001 f8eb 	bl	d684a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d5674:	6828      	ldr	r0, [r5, #0]
   d5676:	6803      	ldr	r3, [r0, #0]
   d5678:	691b      	ldr	r3, [r3, #16]
   d567a:	4798      	blx	r3
   d567c:	2800      	cmp	r0, #0
   d567e:	d0f2      	beq.n	d5666 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   d5680:	6828      	ldr	r0, [r5, #0]
   d5682:	6803      	ldr	r3, [r0, #0]
   d5684:	695b      	ldr	r3, [r3, #20]
   d5686:	4798      	blx	r3
   d5688:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   d568a:	6828      	ldr	r0, [r5, #0]
   d568c:	6803      	ldr	r3, [r0, #0]
   d568e:	695b      	ldr	r3, [r3, #20]
   d5690:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d5692:	b2e4      	uxtb	r4, r4
   d5694:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d5698:	b280      	uxth	r0, r0
   d569a:	e7e5      	b.n	d5668 <_ZN8VCNL404011readCommandEh+0x24>

000d569c <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   d569c:	2108      	movs	r1, #8
   d569e:	f7ff bfd1 	b.w	d5644 <_ZN8VCNL404011readCommandEh>

000d56a2 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   d56a2:	2109      	movs	r1, #9
   d56a4:	f7ff bfce 	b.w	d5644 <_ZN8VCNL404011readCommandEh>

000d56a8 <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   d56a8:	210c      	movs	r1, #12
   d56aa:	f7ff bfcb 	b.w	d5644 <_ZN8VCNL404011readCommandEh>

000d56ae <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   d56ae:	b570      	push	{r4, r5, r6, lr}
   d56b0:	4604      	mov	r4, r0
   d56b2:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d56b4:	6800      	ldr	r0, [r0, #0]
   d56b6:	2160      	movs	r1, #96	; 0x60
{
   d56b8:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d56ba:	f001 f8c9 	bl	d6850 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d56be:	6820      	ldr	r0, [r4, #0]
   d56c0:	6803      	ldr	r3, [r0, #0]
   d56c2:	4631      	mov	r1, r6
   d56c4:	689b      	ldr	r3, [r3, #8]
   d56c6:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   d56c8:	b2e9      	uxtb	r1, r5
   d56ca:	6820      	ldr	r0, [r4, #0]
   d56cc:	f7ff ffa8 	bl	d5620 <_ZN7TwoWire5writeEi>
  _i2cPort->write(value >> 8); //MSB
   d56d0:	0a29      	lsrs	r1, r5, #8
   d56d2:	6820      	ldr	r0, [r4, #0]
   d56d4:	f7ff ffa4 	bl	d5620 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d56d8:	6820      	ldr	r0, [r4, #0]
   d56da:	f001 f8c4 	bl	d6866 <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   d56de:	fab0 f080 	clz	r0, r0
   d56e2:	0940      	lsrs	r0, r0, #5
   d56e4:	bd70      	pop	{r4, r5, r6, pc}

000d56e6 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   d56e6:	b570      	push	{r4, r5, r6, lr}
   d56e8:	4604      	mov	r4, r0
   d56ea:	460d      	mov	r5, r1
   d56ec:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d56ee:	f7ff ffa9 	bl	d5644 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   d56f2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   d56f6:	ea40 0206 	orr.w	r2, r0, r6
   d56fa:	4629      	mov	r1, r5
   d56fc:	4620      	mov	r0, r4
}
   d56fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5702:	f7ff bfd4 	b.w	d56ae <_ZN8VCNL404012writeCommandEht>

000d5706 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   d5706:	b570      	push	{r4, r5, r6, lr}
   d5708:	4604      	mov	r4, r0
   d570a:	460d      	mov	r5, r1
   d570c:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d570e:	f7ff ff99 	bl	d5644 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   d5712:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   d5714:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   d5718:	4629      	mov	r1, r5
   d571a:	4620      	mov	r0, r4
}
   d571c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5720:	f7ff bfc5 	b.w	d56ae <_ZN8VCNL404012writeCommandEht>

000d5724 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   d5724:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   d5726:	f7ff ff8d 	bl	d5644 <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   d572a:	f3c0 2007 	ubfx	r0, r0, #8, #8
   d572e:	bd08      	pop	{r3, pc}

000d5730 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   d5730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5734:	4604      	mov	r4, r0
   d5736:	f89d 7018 	ldrb.w	r7, [sp, #24]
   d573a:	460d      	mov	r5, r1
   d573c:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   d573e:	4616      	mov	r6, r2
   d5740:	b16a      	cbz	r2, d575e <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   d5742:	f7ff ff7f 	bl	d5644 <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   d5746:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   d5748:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   d574c:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d5750:	4629      	mov	r1, r5
   d5752:	4620      	mov	r0, r4
   d5754:	b136      	cbz	r6, d5764 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   d5756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d575a:	f7ff bfc4 	b.w	d56e6 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   d575e:	f7ff ffe1 	bl	d5724 <_ZN8VCNL404016readCommandUpperEh>
   d5762:	e7f1      	b.n	d5748 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   d5764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   d5768:	f7ff bfcd 	b.w	d5706 <_ZN8VCNL404017writeCommandUpperEhh>

000d576c <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d576c:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   d5770:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5772:	d20e      	bcs.n	d5792 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d5774:	299f      	cmp	r1, #159	; 0x9f
   d5776:	d80e      	bhi.n	d5796 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
   d5778:	294f      	cmp	r1, #79	; 0x4f
  else dutyValue = VCNL4040_PS_DUTY_40;
   d577a:	bf8c      	ite	hi
   d577c:	2340      	movhi	r3, #64	; 0x40
   d577e:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   d5780:	9300      	str	r3, [sp, #0]
   d5782:	2201      	movs	r2, #1
   d5784:	233f      	movs	r3, #63	; 0x3f
   d5786:	2103      	movs	r1, #3
   d5788:	f7ff ffd2 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d578c:	b003      	add	sp, #12
   d578e:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5792:	23c0      	movs	r3, #192	; 0xc0
   d5794:	e7f4      	b.n	d5780 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d5796:	2380      	movs	r3, #128	; 0x80
   d5798:	e7f2      	b.n	d5780 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000d579a <_ZN8VCNL404014powerOnAmbientEv>:
{
   d579a:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   d579c:	2100      	movs	r1, #0
   d579e:	9100      	str	r1, [sp, #0]
   d57a0:	23fe      	movs	r3, #254	; 0xfe
   d57a2:	2201      	movs	r2, #1
   d57a4:	f7ff ffc4 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d57a8:	b003      	add	sp, #12
   d57aa:	f85d fb04 	ldr.w	pc, [sp], #4

000d57ae <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d57ae:	2907      	cmp	r1, #7
{
   d57b0:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d57b2:	d80f      	bhi.n	d57d4 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d57b4:	2903      	cmp	r1, #3
   d57b6:	d80f      	bhi.n	d57d8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d57b8:	d010      	beq.n	d57dc <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
   d57ba:	2902      	cmp	r1, #2
  else timeValue = VCNL4040_PS_IT_1T;
   d57bc:	bf0c      	ite	eq
   d57be:	2304      	moveq	r3, #4
   d57c0:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   d57c2:	9300      	str	r3, [sp, #0]
   d57c4:	2201      	movs	r2, #1
   d57c6:	23f1      	movs	r3, #241	; 0xf1
   d57c8:	2103      	movs	r1, #3
   d57ca:	f7ff ffb1 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d57ce:	b003      	add	sp, #12
   d57d0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d57d4:	230e      	movs	r3, #14
   d57d6:	e7f4      	b.n	d57c2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d57d8:	230c      	movs	r3, #12
   d57da:	e7f2      	b.n	d57c2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d57dc:	2308      	movs	r3, #8
   d57de:	e7f0      	b.n	d57c2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000d57e0 <_ZN8VCNL404016powerOnProximityEv>:
{
   d57e0:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   d57e2:	2300      	movs	r3, #0
   d57e4:	9300      	str	r3, [sp, #0]
   d57e6:	2201      	movs	r2, #1
   d57e8:	23fe      	movs	r3, #254	; 0xfe
   d57ea:	2103      	movs	r1, #3
   d57ec:	f7ff ffa0 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d57f0:	b003      	add	sp, #12
   d57f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d57f6 <_ZN8VCNL404017setProxResolutionEh>:
{
   d57f6:	b507      	push	{r0, r1, r2, lr}
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
   d57f8:	290f      	cmp	r1, #15
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   d57fa:	bf8c      	ite	hi
   d57fc:	2308      	movhi	r3, #8
   d57fe:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   d5800:	9300      	str	r3, [sp, #0]
   d5802:	2200      	movs	r2, #0
   d5804:	23f7      	movs	r3, #247	; 0xf7
   d5806:	2103      	movs	r1, #3
   d5808:	f7ff ff92 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d580c:	b003      	add	sp, #12
   d580e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5812 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   d5812:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   d5814:	2302      	movs	r3, #2
   d5816:	9300      	str	r3, [sp, #0]
   d5818:	2201      	movs	r2, #1
   d581a:	23ef      	movs	r3, #239	; 0xef
   d581c:	2104      	movs	r1, #4
   d581e:	f7ff ff87 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5822:	b003      	add	sp, #12
   d5824:	f85d fb04 	ldr.w	pc, [sp], #4

000d5828 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5828:	29c7      	cmp	r1, #199	; 0xc7
{
   d582a:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d582c:	d816      	bhi.n	d585c <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d582e:	29b3      	cmp	r1, #179	; 0xb3
   d5830:	d816      	bhi.n	d5860 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5832:	299f      	cmp	r1, #159	; 0x9f
   d5834:	d816      	bhi.n	d5864 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5836:	298b      	cmp	r1, #139	; 0x8b
   d5838:	d816      	bhi.n	d5868 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d583a:	2977      	cmp	r1, #119	; 0x77
   d583c:	d816      	bhi.n	d586c <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d583e:	2963      	cmp	r1, #99	; 0x63
   d5840:	d816      	bhi.n	d5870 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5842:	294a      	cmp	r1, #74	; 0x4a
   d5844:	bf94      	ite	ls
   d5846:	2100      	movls	r1, #0
   d5848:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   d584a:	9100      	str	r1, [sp, #0]
   d584c:	23f8      	movs	r3, #248	; 0xf8
   d584e:	2200      	movs	r2, #0
   d5850:	2104      	movs	r1, #4
   d5852:	f7ff ff6d 	bl	d5730 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5856:	b003      	add	sp, #12
   d5858:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d585c:	2107      	movs	r1, #7
   d585e:	e7f4      	b.n	d584a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d5860:	2106      	movs	r1, #6
   d5862:	e7f2      	b.n	d584a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5864:	2105      	movs	r1, #5
   d5866:	e7f0      	b.n	d584a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5868:	2104      	movs	r1, #4
   d586a:	e7ee      	b.n	d584a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d586c:	2103      	movs	r1, #3
   d586e:	e7ec      	b.n	d584a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d5870:	2102      	movs	r1, #2
   d5872:	e7ea      	b.n	d584a <_ZN8VCNL404013setLEDCurrentEh+0x22>

000d5874 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   d5874:	b538      	push	{r3, r4, r5, lr}
   d5876:	4604      	mov	r4, r0
   d5878:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d587a:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d587c:	f000 ffb6 	bl	d67ec <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   d5880:	4620      	mov	r0, r4
   d5882:	f7ff fed2 	bl	d562a <_ZN8VCNL404011isConnectedEv>
   d5886:	4605      	mov	r5, r0
   d5888:	b910      	cbnz	r0, d5890 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   d588a:	2500      	movs	r5, #0
}
   d588c:	4628      	mov	r0, r5
   d588e:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   d5890:	4620      	mov	r0, r4
   d5892:	f7ff ff09 	bl	d56a8 <_ZN8VCNL40405getIDEv>
   d5896:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   d589a:	d1f6      	bne.n	d588a <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   d589c:	4620      	mov	r0, r4
   d589e:	21c8      	movs	r1, #200	; 0xc8
   d58a0:	f7ff ffc2 	bl	d5828 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   d58a4:	4620      	mov	r0, r4
   d58a6:	2128      	movs	r1, #40	; 0x28
   d58a8:	f7ff ff60 	bl	d576c <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   d58ac:	4620      	mov	r0, r4
   d58ae:	2108      	movs	r1, #8
   d58b0:	f7ff ff7d 	bl	d57ae <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   d58b4:	2110      	movs	r1, #16
   d58b6:	4620      	mov	r0, r4
   d58b8:	f7ff ff9d 	bl	d57f6 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   d58bc:	4620      	mov	r0, r4
   d58be:	f7ff ffa8 	bl	d5812 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   d58c2:	4620      	mov	r0, r4
   d58c4:	f7ff ff8c 	bl	d57e0 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   d58c8:	e7e0      	b.n	d588c <_ZN8VCNL40405beginER7TwoWire+0x18>
	...

000d58cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <netdb_freeaddrinfo+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	689b      	ldr	r3, [r3, #8]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030268 	.word	0x00030268

000d58dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <netdb_getaddrinfo+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	68db      	ldr	r3, [r3, #12]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030268 	.word	0x00030268

000d58ec <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <HAL_Pin_Mode+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	689b      	ldr	r3, [r3, #8]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	0003022c 	.word	0x0003022c

000d58fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <HAL_Get_Pin_Mode+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	68db      	ldr	r3, [r3, #12]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	0003022c 	.word	0x0003022c

000d590c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <HAL_GPIO_Write+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	691b      	ldr	r3, [r3, #16]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	0003022c 	.word	0x0003022c

000d591c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <HAL_GPIO_Read+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	695b      	ldr	r3, [r3, #20]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	0003022c 	.word	0x0003022c

000d592c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <HAL_RNG_GetRandomNumber+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	685b      	ldr	r3, [r3, #4]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030218 	.word	0x00030218

000d593c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <HAL_Delay_Microseconds+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	68db      	ldr	r3, [r3, #12]
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030218 	.word	0x00030218

000d594c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	695b      	ldr	r3, [r3, #20]
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030218 	.word	0x00030218

000d595c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <os_mutex_create+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	00030248 	.word	0x00030248

000d596c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <os_mutex_destroy+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	00030248 	.word	0x00030248

000d597c <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <os_mutex_recursive_create+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	00030248 	.word	0x00030248

000d598c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <os_mutex_recursive_destroy+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	00030248 	.word	0x00030248

000d599c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <inet_inet_ntop+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	695b      	ldr	r3, [r3, #20]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	00030264 	.word	0x00030264

000d59ac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <hal_usart_init+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	681b      	ldr	r3, [r3, #0]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003023c 	.word	0x0003023c

000d59bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <hal_usart_write+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	68db      	ldr	r3, [r3, #12]
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003023c 	.word	0x0003023c

000d59cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <hal_usart_available+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	691b      	ldr	r3, [r3, #16]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003023c 	.word	0x0003023c

000d59dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <hal_usart_read+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	695b      	ldr	r3, [r3, #20]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003023c 	.word	0x0003023c

000d59ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <hal_usart_peek+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	699b      	ldr	r3, [r3, #24]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003023c 	.word	0x0003023c

000d59fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <hal_usart_flush+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	69db      	ldr	r3, [r3, #28]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	0003023c 	.word	0x0003023c

000d5a0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <hal_usart_is_enabled+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	6a1b      	ldr	r3, [r3, #32]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	0003023c 	.word	0x0003023c

000d5a1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <hal_usart_available_data_for_write+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	0003023c 	.word	0x0003023c

000d5a2c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <hal_i2c_set_speed+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	681b      	ldr	r3, [r3, #0]
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	00030228 	.word	0x00030228

000d5a3c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <hal_i2c_begin+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	68db      	ldr	r3, [r3, #12]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030228 	.word	0x00030228

000d5a4c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <hal_i2c_begin_transmission+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	699b      	ldr	r3, [r3, #24]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030228 	.word	0x00030228

000d5a5c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <hal_i2c_end_transmission+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	69db      	ldr	r3, [r3, #28]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030228 	.word	0x00030228

000d5a6c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <hal_i2c_write+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	6a1b      	ldr	r3, [r3, #32]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030228 	.word	0x00030228

000d5a7c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <hal_i2c_available+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030228 	.word	0x00030228

000d5a8c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <hal_i2c_read+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030228 	.word	0x00030228

000d5a9c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <hal_i2c_peek+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030228 	.word	0x00030228

000d5aac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <hal_i2c_flush+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030228 	.word	0x00030228

000d5abc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <hal_i2c_is_enabled+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030228 	.word	0x00030228

000d5acc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <hal_i2c_init+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030228 	.word	0x00030228

000d5adc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <hal_i2c_request_ex+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030228 	.word	0x00030228

000d5aec <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <hal_spi_begin+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	681b      	ldr	r3, [r3, #0]
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030230 	.word	0x00030230

000d5afc <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <hal_spi_transfer+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	695b      	ldr	r3, [r3, #20]
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030230 	.word	0x00030230

000d5b0c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <hal_spi_init+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	69db      	ldr	r3, [r3, #28]
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030230 	.word	0x00030230

000d5b1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <hal_spi_is_enabled+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	6a1b      	ldr	r3, [r3, #32]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	00030230 	.word	0x00030230

000d5b2c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <hal_spi_info+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	00030230 	.word	0x00030230

000d5b3c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <hal_spi_set_settings+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	00030230 	.word	0x00030230

000d5b4c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <hal_spi_acquire+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030230 	.word	0x00030230

000d5b5c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <hal_spi_release+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030230 	.word	0x00030230

000d5b6c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <HAL_USB_USART_Init+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	681b      	ldr	r3, [r3, #0]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	0003024c 	.word	0x0003024c

000d5b7c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <HAL_USB_USART_Begin+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	685b      	ldr	r3, [r3, #4]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003024c 	.word	0x0003024c

000d5b8c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <HAL_USB_USART_Available_Data+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	691b      	ldr	r3, [r3, #16]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	0003024c 	.word	0x0003024c

000d5b9c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	695b      	ldr	r3, [r3, #20]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	0003024c 	.word	0x0003024c

000d5bac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <HAL_USB_USART_Receive_Data+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	699b      	ldr	r3, [r3, #24]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	0003024c 	.word	0x0003024c

000d5bbc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <HAL_USB_USART_Send_Data+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	69db      	ldr	r3, [r3, #28]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	0003024c 	.word	0x0003024c

000d5bcc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_USB_USART_Flush_Data+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	6a1b      	ldr	r3, [r3, #32]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	0003024c 	.word	0x0003024c

000d5bdc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <panic_+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030260 	.word	0x00030260

000d5bec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <set_system_mode+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	685b      	ldr	r3, [r3, #4]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030220 	.word	0x00030220

000d5bfc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <system_delay_ms+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	695b      	ldr	r3, [r3, #20]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030220 	.word	0x00030220

000d5c0c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <system_thread_set_state+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030220 	.word	0x00030220

000d5c1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b03      	ldr	r3, [pc, #12]	; (d5c2c <system_ctrl_set_app_request_handler+0x10>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5c26:	9301      	str	r3, [sp, #4]
   d5c28:	bd08      	pop	{r3, pc}
   d5c2a:	0000      	.short	0x0000
   d5c2c:	00030220 	.word	0x00030220

000d5c30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b03      	ldr	r3, [pc, #12]	; (d5c40 <system_ctrl_set_result+0x10>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5c3a:	9301      	str	r3, [sp, #4]
   d5c3c:	bd08      	pop	{r3, pc}
   d5c3e:	0000      	.short	0x0000
   d5c40:	00030220 	.word	0x00030220

000d5c44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <network_connect+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	685b      	ldr	r3, [r3, #4]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030240 	.word	0x00030240

000d5c54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <network_connecting+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	689b      	ldr	r3, [r3, #8]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030240 	.word	0x00030240

000d5c64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <network_disconnect+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	68db      	ldr	r3, [r3, #12]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030240 	.word	0x00030240

000d5c74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <network_ready+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	691b      	ldr	r3, [r3, #16]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030240 	.word	0x00030240

000d5c84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <network_on+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	695b      	ldr	r3, [r3, #20]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030240 	.word	0x00030240

000d5c94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <network_off+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	699b      	ldr	r3, [r3, #24]
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030240 	.word	0x00030240

000d5ca4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <network_listen+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	69db      	ldr	r3, [r3, #28]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030240 	.word	0x00030240

000d5cb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <network_listening+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	6a1b      	ldr	r3, [r3, #32]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030240 	.word	0x00030240

000d5cc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <network_set_listen_timeout+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030240 	.word	0x00030240

000d5cd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <network_get_listen_timeout+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030240 	.word	0x00030240

000d5ce4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <network_is_on+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030240 	.word	0x00030240

000d5cf4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <network_is_off+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030240 	.word	0x00030240

000d5d04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030244 	.word	0x00030244

000d5d14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <malloc+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	681b      	ldr	r3, [r3, #0]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	0003021c 	.word	0x0003021c

000d5d24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <free+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	685b      	ldr	r3, [r3, #4]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	0003021c 	.word	0x0003021c

000d5d34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <realloc+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	689b      	ldr	r3, [r3, #8]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	0003021c 	.word	0x0003021c

000d5d44 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <vsnprintf+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	0003021c 	.word	0x0003021c

000d5d54 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <newlib_impure_ptr_callback+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	0003021c 	.word	0x0003021c

000d5d64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d64:	2200      	movs	r2, #0
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	4611      	mov	r1, r2
   d5d6a:	f7ff bfa3 	b.w	d5cb4 <network_listening>

000d5d6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d6e:	2200      	movs	r2, #0
   d5d70:	6840      	ldr	r0, [r0, #4]
   d5d72:	4611      	mov	r1, r2
   d5d74:	f7ff bfae 	b.w	d5cd4 <network_get_listen_timeout>

000d5d78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d78:	6840      	ldr	r0, [r0, #4]
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	f7ff bfa2 	b.w	d5cc4 <network_set_listen_timeout>

000d5d80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d80:	6840      	ldr	r0, [r0, #4]
   d5d82:	2200      	movs	r2, #0
   d5d84:	f081 0101 	eor.w	r1, r1, #1
   d5d88:	f7ff bf8c 	b.w	d5ca4 <network_listen>

000d5d8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	6840      	ldr	r0, [r0, #4]
   d5d90:	461a      	mov	r2, r3
   d5d92:	4619      	mov	r1, r3
   d5d94:	f7ff bf7e 	b.w	d5c94 <network_off>

000d5d98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d98:	2300      	movs	r3, #0
   d5d9a:	6840      	ldr	r0, [r0, #4]
   d5d9c:	461a      	mov	r2, r3
   d5d9e:	4619      	mov	r1, r3
   d5da0:	f7ff bf70 	b.w	d5c84 <network_on>

000d5da4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5da4:	2200      	movs	r2, #0
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	4611      	mov	r1, r2
   d5daa:	f7ff bf63 	b.w	d5c74 <network_ready>

000d5dae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5dae:	2200      	movs	r2, #0
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	4611      	mov	r1, r2
   d5db4:	f7ff bf4e 	b.w	d5c54 <network_connecting>

000d5db8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5db8:	6840      	ldr	r0, [r0, #4]
   d5dba:	2200      	movs	r2, #0
   d5dbc:	2102      	movs	r1, #2
   d5dbe:	f7ff bf51 	b.w	d5c64 <network_disconnect>

000d5dc2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	6840      	ldr	r0, [r0, #4]
   d5dc6:	461a      	mov	r2, r3
   d5dc8:	f7ff bf3c 	b.w	d5c44 <network_connect>

000d5dcc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5dcc:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5dce:	2203      	movs	r2, #3
   d5dd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5dd2:	4a02      	ldr	r2, [pc, #8]	; (d5ddc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5dd4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5dd6:	4770      	bx	lr
   d5dd8:	2003e650 	.word	0x2003e650
   d5ddc:	000d77fc 	.word	0x000d77fc

000d5de0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5de0:	2100      	movs	r1, #0
   d5de2:	f7ff beb3 	b.w	d5b4c <hal_spi_acquire>

000d5de6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5de6:	2100      	movs	r1, #0
   d5de8:	f7ff beb8 	b.w	d5b5c <hal_spi_release>

000d5dec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5dec:	b510      	push	{r4, lr}
   d5dee:	4604      	mov	r4, r0
   d5df0:	4608      	mov	r0, r1
{
    _spi = spi;
   d5df2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5df4:	f7ff fe8a 	bl	d5b0c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5df8:	2300      	movs	r3, #0
   d5dfa:	6063      	str	r3, [r4, #4]
}
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	bd10      	pop	{r4, pc}

000d5e00 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5e00:	b510      	push	{r4, lr}
   d5e02:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5e04:	7800      	ldrb	r0, [r0, #0]
   d5e06:	f7ff ffeb 	bl	d5de0 <_ZN8SPIClass4lockEv.isra.0>
   d5e0a:	b948      	cbnz	r0, d5e20 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5e0c:	7820      	ldrb	r0, [r4, #0]
   d5e0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5e12:	f7ff fe6b 	bl	d5aec <hal_spi_begin>
        unlock();
   d5e16:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5e1c:	f7ff bfe3 	b.w	d5de6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5e20:	bd10      	pop	{r4, pc}

000d5e22 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5e22:	7800      	ldrb	r0, [r0, #0]
   d5e24:	f7ff bfdf 	b.w	d5de6 <_ZN8SPIClass6unlockEv.isra.0>

000d5e28 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5e28:	0840      	lsrs	r0, r0, #1
{
   d5e2a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5e2c:	6018      	str	r0, [r3, #0]
   d5e2e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5e30:	6818      	ldr	r0, [r3, #0]
   d5e32:	4288      	cmp	r0, r1
   d5e34:	b2e5      	uxtb	r5, r4
   d5e36:	d906      	bls.n	d5e46 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5e38:	3401      	adds	r4, #1
   d5e3a:	2c08      	cmp	r4, #8
   d5e3c:	d002      	beq.n	d5e44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5e3e:	0840      	lsrs	r0, r0, #1
   d5e40:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5e42:	e7f5      	b.n	d5e30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5e44:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5e48:	5d5b      	ldrb	r3, [r3, r5]
   d5e4a:	7013      	strb	r3, [r2, #0]
}
   d5e4c:	bd30      	pop	{r4, r5, pc}
   d5e4e:	bf00      	nop
   d5e50:	000d7830 	.word	0x000d7830

000d5e54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e58:	4606      	mov	r6, r0
   d5e5a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5e5c:	7800      	ldrb	r0, [r0, #0]
{
   d5e5e:	460c      	mov	r4, r1
    CHECK(lock());
   d5e60:	f7ff ffbe 	bl	d5de0 <_ZN8SPIClass4lockEv.isra.0>
   d5e64:	2800      	cmp	r0, #0
   d5e66:	db1b      	blt.n	d5ea0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5e68:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5e6a:	2214      	movs	r2, #20
   d5e6c:	2100      	movs	r1, #0
   d5e6e:	a809      	add	r0, sp, #36	; 0x24
   d5e70:	f000 fecc 	bl	d6c0c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5e74:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5e76:	2200      	movs	r2, #0
   d5e78:	a909      	add	r1, sp, #36	; 0x24
   d5e7a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5e7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5e80:	f7ff fe54 	bl	d5b2c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5e84:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5e88:	b113      	cbz	r3, d5e90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5e8a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5e8e:	b155      	cbz	r5, d5ea6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5e90:	2700      	movs	r7, #0
   d5e92:	46b9      	mov	r9, r7
   d5e94:	46b8      	mov	r8, r7
   d5e96:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5e98:	7923      	ldrb	r3, [r4, #4]
   d5e9a:	b15d      	cbz	r5, d5eb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5e9c:	b1c3      	cbz	r3, d5ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5e9e:	2000      	movs	r0, #0
}
   d5ea0:	b00f      	add	sp, #60	; 0x3c
   d5ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5ea6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5eaa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5eae:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5eb2:	e7f1      	b.n	d5e98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5eb4:	2b00      	cmp	r3, #0
   d5eb6:	d135      	bne.n	d5f24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5eb8:	68a3      	ldr	r3, [r4, #8]
   d5eba:	4543      	cmp	r3, r8
   d5ebc:	d108      	bne.n	d5ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5ebe:	f88d 9020 	strb.w	r9, [sp, #32]
   d5ec2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5ec6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5eca:	89a3      	ldrh	r3, [r4, #12]
   d5ecc:	429a      	cmp	r2, r3
   d5ece:	d0e6      	beq.n	d5e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5ed0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5ed2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5ed4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5eda:	ab04      	add	r3, sp, #16
   d5edc:	f10d 020f 	add.w	r2, sp, #15
   d5ee0:	f7ff ffa2 	bl	d5e28 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5ee4:	7921      	ldrb	r1, [r4, #4]
   d5ee6:	b985      	cbnz	r5, d5f0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5ee8:	b989      	cbnz	r1, d5f0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5eea:	68a3      	ldr	r3, [r4, #8]
   d5eec:	4543      	cmp	r3, r8
   d5eee:	d30e      	bcc.n	d5f0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5ef0:	f88d 9020 	strb.w	r9, [sp, #32]
   d5ef4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5ef8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5efc:	89a3      	ldrh	r3, [r4, #12]
   d5efe:	429a      	cmp	r2, r3
   d5f00:	d105      	bne.n	d5f0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5f02:	9b04      	ldr	r3, [sp, #16]
   d5f04:	4543      	cmp	r3, r8
   d5f06:	d102      	bne.n	d5f0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5f08:	e7c9      	b.n	d5e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5f0a:	2900      	cmp	r1, #0
   d5f0c:	d1f9      	bne.n	d5f02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5f0e:	2300      	movs	r3, #0
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	7b63      	ldrb	r3, [r4, #13]
   d5f14:	9300      	str	r3, [sp, #0]
   d5f16:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5f1a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5f1c:	7830      	ldrb	r0, [r6, #0]
   d5f1e:	f7ff fe0d 	bl	d5b3c <hal_spi_set_settings>
   d5f22:	e7bc      	b.n	d5e9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5f24:	e9cd 5500 	strd	r5, r5, [sp]
   d5f28:	462b      	mov	r3, r5
   d5f2a:	462a      	mov	r2, r5
   d5f2c:	2101      	movs	r1, #1
   d5f2e:	e7f5      	b.n	d5f1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5f30 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5f30:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5f32:	7800      	ldrb	r0, [r0, #0]
   d5f34:	f7ff fde2 	bl	d5afc <hal_spi_transfer>
}
   d5f38:	b2c0      	uxtb	r0, r0
   d5f3a:	bd08      	pop	{r3, pc}

000d5f3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5f40:	6800      	ldr	r0, [r0, #0]
   d5f42:	b118      	cbz	r0, d5f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5f44:	f7ff feee 	bl	d5d24 <free>
            wakeupSource_ = nullptr;
   d5f48:	2300      	movs	r3, #0
   d5f4a:	6023      	str	r3, [r4, #0]
        }
    }
   d5f4c:	bd10      	pop	{r4, pc}

000d5f4e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5f4e:	b510      	push	{r4, lr}
   d5f50:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5f52:	f7ff fff3 	bl	d5f3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5f56:	4620      	mov	r0, r4
   d5f58:	bd10      	pop	{r4, pc}
	...

000d5f5c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5f5c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5f5e:	4b09      	ldr	r3, [pc, #36]	; (d5f84 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5f60:	4c09      	ldr	r4, [pc, #36]	; (d5f88 <_GLOBAL__sub_I_System+0x2c>)
   d5f62:	2202      	movs	r2, #2
   d5f64:	2000      	movs	r0, #0
   d5f66:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5f68:	4b08      	ldr	r3, [pc, #32]	; (d5f8c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5f6a:	6020      	str	r0, [r4, #0]
   d5f6c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5f6e:	71a0      	strb	r0, [r4, #6]
   d5f70:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f72:	f7ff fe3b 	bl	d5bec <set_system_mode>
SystemClass System;
   d5f76:	4620      	mov	r0, r4
   d5f78:	4a05      	ldr	r2, [pc, #20]	; (d5f90 <_GLOBAL__sub_I_System+0x34>)
   d5f7a:	4906      	ldr	r1, [pc, #24]	; (d5f94 <_GLOBAL__sub_I_System+0x38>)
   d5f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5f80:	f000 be1e 	b.w	d6bc0 <__aeabi_atexit>
   d5f84:	2003e664 	.word	0x2003e664
   d5f88:	2003e658 	.word	0x2003e658
   d5f8c:	ffff0000 	.word	0xffff0000
   d5f90:	2003e5cc 	.word	0x2003e5cc
   d5f94:	000d5f4f 	.word	0x000d5f4f

000d5f98 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5f98:	b510      	push	{r4, lr}
   d5f9a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5f9c:	f000 fe6a 	bl	d6c74 <strlen>
   d5fa0:	3801      	subs	r0, #1
   d5fa2:	1823      	adds	r3, r4, r0
   d5fa4:	4620      	mov	r0, r4
	while(i<j){
   d5fa6:	4283      	cmp	r3, r0
   d5fa8:	d906      	bls.n	d5fb8 <_Z11str_reversePc+0x20>
		c = *i;
   d5faa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5fac:	7819      	ldrb	r1, [r3, #0]
   d5fae:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5fb2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5fb6:	e7f6      	b.n	d5fa6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5fb8:	bd10      	pop	{r4, pc}

000d5fba <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fba:	b570      	push	{r4, r5, r6, lr}
   d5fbc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5fbe:	1e91      	subs	r1, r2, #2
   d5fc0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fc2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5fc4:	d822      	bhi.n	d600c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5fc6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5fc8:	b16d      	cbz	r5, d5fe6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5fca:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5fce:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5fd2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5fd4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5fd6:	bf94      	ite	ls
   d5fd8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5fda:	3157      	addhi	r1, #87	; 0x57
   d5fdc:	b2c9      	uxtb	r1, r1
   d5fde:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5fe2:	4635      	mov	r5, r6
	while(a){
   d5fe4:	e7f0      	b.n	d5fc8 <ultoa+0xe>
   d5fe6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5fe8:	4423      	add	r3, r4
            *ptr++ = '0';
   d5fea:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5fec:	4293      	cmp	r3, r2
   d5fee:	d902      	bls.n	d5ff6 <ultoa+0x3c>
            *ptr++ = '0';
   d5ff0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5ff4:	e7fa      	b.n	d5fec <ultoa+0x32>
   d5ff6:	1a1a      	subs	r2, r3, r0
   d5ff8:	4283      	cmp	r3, r0
   d5ffa:	bf38      	it	cc
   d5ffc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5ffe:	2300      	movs	r3, #0
   d6000:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6002:	4620      	mov	r0, r4
   d6004:	f7ff ffc8 	bl	d5f98 <_Z11str_reversePc>
	return buffer;
   d6008:	4620      	mov	r0, r4
}
   d600a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d600c:	2000      	movs	r0, #0
   d600e:	e7fc      	b.n	d600a <ultoa+0x50>

000d6010 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6010:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6012:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6014:	460c      	mov	r4, r1
   d6016:	4615      	mov	r5, r2
	if(a<0){
   d6018:	da0e      	bge.n	d6038 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d601a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d601e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6022:	bf14      	ite	ne
   d6024:	4258      	negne	r0, r3
   d6026:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6028:	2301      	movs	r3, #1
		*buffer = '-';
   d602a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d602c:	462a      	mov	r2, r5
   d602e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6030:	f7ff ffc3 	bl	d5fba <ultoa>
	}
	return buffer;
}
   d6034:	4620      	mov	r0, r4
   d6036:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6038:	2301      	movs	r3, #1
   d603a:	e7f9      	b.n	d6030 <itoa+0x20>

000d603c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d603c:	b510      	push	{r4, lr}
   d603e:	4604      	mov	r4, r0
{
	free(buffer);
   d6040:	6800      	ldr	r0, [r0, #0]
   d6042:	f7ff fe6f 	bl	d5d24 <free>
}
   d6046:	4620      	mov	r0, r4
   d6048:	bd10      	pop	{r4, pc}

000d604a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d604a:	b510      	push	{r4, lr}
   d604c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d604e:	6800      	ldr	r0, [r0, #0]
   d6050:	b108      	cbz	r0, d6056 <_ZN6String10invalidateEv+0xc>
   d6052:	f7ff fe67 	bl	d5d24 <free>
	buffer = NULL;
   d6056:	2300      	movs	r3, #0
	capacity = len = 0;
   d6058:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d605c:	6023      	str	r3, [r4, #0]
}
   d605e:	bd10      	pop	{r4, pc}

000d6060 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6060:	b538      	push	{r3, r4, r5, lr}
   d6062:	4604      	mov	r4, r0
   d6064:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6066:	6800      	ldr	r0, [r0, #0]
   d6068:	3101      	adds	r1, #1
   d606a:	f7ff fe63 	bl	d5d34 <realloc>
	if (newbuffer) {
   d606e:	b110      	cbz	r0, d6076 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6070:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6074:	2001      	movs	r0, #1
	}
	return 0;
}
   d6076:	bd38      	pop	{r3, r4, r5, pc}

000d6078 <_ZN6String7reserveEj>:
{
   d6078:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d607a:	6803      	ldr	r3, [r0, #0]
{
   d607c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d607e:	b123      	cbz	r3, d608a <_ZN6String7reserveEj+0x12>
   d6080:	6843      	ldr	r3, [r0, #4]
   d6082:	428b      	cmp	r3, r1
   d6084:	d301      	bcc.n	d608a <_ZN6String7reserveEj+0x12>
   d6086:	2001      	movs	r0, #1
}
   d6088:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d608a:	4620      	mov	r0, r4
   d608c:	f7ff ffe8 	bl	d6060 <_ZN6String12changeBufferEj>
   d6090:	2800      	cmp	r0, #0
   d6092:	d0f9      	beq.n	d6088 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6094:	68a3      	ldr	r3, [r4, #8]
   d6096:	2b00      	cmp	r3, #0
   d6098:	d1f5      	bne.n	d6086 <_ZN6String7reserveEj+0xe>
   d609a:	6822      	ldr	r2, [r4, #0]
   d609c:	7013      	strb	r3, [r2, #0]
   d609e:	e7f2      	b.n	d6086 <_ZN6String7reserveEj+0xe>

000d60a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60a2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d60a4:	4611      	mov	r1, r2
   d60a6:	9201      	str	r2, [sp, #4]
{
   d60a8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d60aa:	f7ff ffe5 	bl	d6078 <_ZN6String7reserveEj>
   d60ae:	9a01      	ldr	r2, [sp, #4]
   d60b0:	b928      	cbnz	r0, d60be <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d60b2:	4620      	mov	r0, r4
   d60b4:	f7ff ffc9 	bl	d604a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d60b8:	4620      	mov	r0, r4
   d60ba:	b003      	add	sp, #12
   d60bc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d60be:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d60c0:	4629      	mov	r1, r5
   d60c2:	6820      	ldr	r0, [r4, #0]
   d60c4:	f000 fd94 	bl	d6bf0 <memcpy>
	buffer[len] = 0;
   d60c8:	6822      	ldr	r2, [r4, #0]
   d60ca:	68a3      	ldr	r3, [r4, #8]
   d60cc:	2100      	movs	r1, #0
   d60ce:	54d1      	strb	r1, [r2, r3]
	return *this;
   d60d0:	e7f2      	b.n	d60b8 <_ZN6String4copyEPKcj+0x18>

000d60d2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d60d2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d60d4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d60d6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d60da:	4604      	mov	r4, r0
	len = 0;
   d60dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d60de:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d60e0:	b141      	cbz	r1, d60f4 <_ZN6StringC1EPKc+0x22>
   d60e2:	4608      	mov	r0, r1
   d60e4:	9101      	str	r1, [sp, #4]
   d60e6:	f000 fdc5 	bl	d6c74 <strlen>
   d60ea:	9901      	ldr	r1, [sp, #4]
   d60ec:	4602      	mov	r2, r0
   d60ee:	4620      	mov	r0, r4
   d60f0:	f7ff ffd6 	bl	d60a0 <_ZN6String4copyEPKcj>
}
   d60f4:	4620      	mov	r0, r4
   d60f6:	b002      	add	sp, #8
   d60f8:	bd10      	pop	{r4, pc}

000d60fa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d60fa:	b513      	push	{r0, r1, r4, lr}
   d60fc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d60fe:	b159      	cbz	r1, d6118 <_ZN6StringaSEPKc+0x1e>
   d6100:	4608      	mov	r0, r1
   d6102:	9101      	str	r1, [sp, #4]
   d6104:	f000 fdb6 	bl	d6c74 <strlen>
   d6108:	9901      	ldr	r1, [sp, #4]
   d610a:	4602      	mov	r2, r0
   d610c:	4620      	mov	r0, r4
   d610e:	f7ff ffc7 	bl	d60a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6112:	4620      	mov	r0, r4
   d6114:	b002      	add	sp, #8
   d6116:	bd10      	pop	{r4, pc}
	else invalidate();
   d6118:	f7ff ff97 	bl	d604a <_ZN6String10invalidateEv>
   d611c:	e7f9      	b.n	d6112 <_ZN6StringaSEPKc+0x18>

000d611e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d611e:	b510      	push	{r4, lr}
   d6120:	4604      	mov	r4, r0
   d6122:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6124:	2300      	movs	r3, #0
	capacity = 0;
   d6126:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d612a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d612c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d612e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6130:	a901      	add	r1, sp, #4
   d6132:	f7ff ff6d 	bl	d6010 <itoa>
	*this = buf;
   d6136:	a901      	add	r1, sp, #4
   d6138:	4620      	mov	r0, r4
   d613a:	f7ff ffde 	bl	d60fa <_ZN6StringaSEPKc>
}
   d613e:	4620      	mov	r0, r4
   d6140:	b00a      	add	sp, #40	; 0x28
   d6142:	bd10      	pop	{r4, pc}

000d6144 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6144:	b570      	push	{r4, r5, r6, lr}
   d6146:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6148:	460e      	mov	r6, r1
   d614a:	b909      	cbnz	r1, d6150 <_ZN6String6concatEPKcj+0xc>
   d614c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d614e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6150:	b16a      	cbz	r2, d616e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6152:	6884      	ldr	r4, [r0, #8]
   d6154:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6156:	4621      	mov	r1, r4
   d6158:	f7ff ff8e 	bl	d6078 <_ZN6String7reserveEj>
   d615c:	2800      	cmp	r0, #0
   d615e:	d0f5      	beq.n	d614c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6160:	6828      	ldr	r0, [r5, #0]
   d6162:	68ab      	ldr	r3, [r5, #8]
   d6164:	4631      	mov	r1, r6
   d6166:	4418      	add	r0, r3
   d6168:	f000 fd7c 	bl	d6c64 <strcpy>
	len = newlen;
   d616c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d616e:	2001      	movs	r0, #1
   d6170:	e7ed      	b.n	d614e <_ZN6String6concatEPKcj+0xa>

000d6172 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d6172:	688a      	ldr	r2, [r1, #8]
   d6174:	6809      	ldr	r1, [r1, #0]
   d6176:	f7ff bfe5 	b.w	d6144 <_ZN6String6concatEPKcj>

000d617a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d617a:	b510      	push	{r4, lr}
   d617c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d617e:	6800      	ldr	r0, [r0, #0]
   d6180:	b108      	cbz	r0, d6186 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6182:	f7ff fc03 	bl	d598c <os_mutex_recursive_destroy>
    }
   d6186:	4620      	mov	r0, r4
   d6188:	bd10      	pop	{r4, pc}

000d618a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d618a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d618c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d618e:	4604      	mov	r4, r0
      if (_M_manager)
   d6190:	b113      	cbz	r3, d6198 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6192:	2203      	movs	r2, #3
   d6194:	4601      	mov	r1, r0
   d6196:	4798      	blx	r3
    }
   d6198:	4620      	mov	r0, r4
   d619a:	bd10      	pop	{r4, pc}

000d619c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d619c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d619e:	4c06      	ldr	r4, [pc, #24]	; (d61b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d61a0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d61a2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d61a4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d61a6:	f7ff fbe9 	bl	d597c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d61aa:	4620      	mov	r0, r4
   d61ac:	4a03      	ldr	r2, [pc, #12]	; (d61bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d61ae:	4904      	ldr	r1, [pc, #16]	; (d61c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d61b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d61b4:	f000 bd04 	b.w	d6bc0 <__aeabi_atexit>
   d61b8:	2003e668 	.word	0x2003e668
   d61bc:	2003e5cc 	.word	0x2003e5cc
   d61c0:	000d617b 	.word	0x000d617b

000d61c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d61c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61c6:	4606      	mov	r6, r0
   d61c8:	460d      	mov	r5, r1
  size_t n = 0;
   d61ca:	188f      	adds	r7, r1, r2
   d61cc:	2400      	movs	r4, #0
  while (size--) {
   d61ce:	42bd      	cmp	r5, r7
   d61d0:	d00c      	beq.n	d61ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d61d2:	6833      	ldr	r3, [r6, #0]
   d61d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d61d8:	689b      	ldr	r3, [r3, #8]
   d61da:	4630      	mov	r0, r6
   d61dc:	4798      	blx	r3
     if (chunk>=0)
   d61de:	1e03      	subs	r3, r0, #0
   d61e0:	db01      	blt.n	d61e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d61e2:	441c      	add	r4, r3
  while (size--) {
   d61e4:	e7f3      	b.n	d61ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d61e6:	2c00      	cmp	r4, #0
   d61e8:	bf08      	it	eq
   d61ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d61ec:	4620      	mov	r0, r4
   d61ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d61f0:	b513      	push	{r0, r1, r4, lr}
   d61f2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d61f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d61f6:	b159      	cbz	r1, d6210 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d61f8:	9101      	str	r1, [sp, #4]
   d61fa:	f000 fd3b 	bl	d6c74 <strlen>
   d61fe:	6823      	ldr	r3, [r4, #0]
   d6200:	9901      	ldr	r1, [sp, #4]
   d6202:	68db      	ldr	r3, [r3, #12]
   d6204:	4602      	mov	r2, r0
   d6206:	4620      	mov	r0, r4
    }
   d6208:	b002      	add	sp, #8
   d620a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d620e:	4718      	bx	r3
    }
   d6210:	b002      	add	sp, #8
   d6212:	bd10      	pop	{r4, pc}

000d6214 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6214:	b508      	push	{r3, lr}
  return write(str);
   d6216:	f7ff ffeb 	bl	d61f0 <_ZN5Print5writeEPKc>
}
   d621a:	bd08      	pop	{r3, pc}

000d621c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d621c:	6803      	ldr	r3, [r0, #0]
   d621e:	689b      	ldr	r3, [r3, #8]
   d6220:	4718      	bx	r3

000d6222 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6222:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6224:	210d      	movs	r1, #13
{
   d6226:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6228:	f7ff fff8 	bl	d621c <_ZN5Print5printEc>
  n += print('\n');
   d622c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d622e:	4604      	mov	r4, r0
  n += print('\n');
   d6230:	4628      	mov	r0, r5
   d6232:	f7ff fff3 	bl	d621c <_ZN5Print5printEc>
  return n;
}
   d6236:	4420      	add	r0, r4
   d6238:	bd38      	pop	{r3, r4, r5, pc}

000d623a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d623a:	b538      	push	{r3, r4, r5, lr}
   d623c:	4605      	mov	r5, r0
  return write(str);
   d623e:	f7ff ffd7 	bl	d61f0 <_ZN5Print5writeEPKc>
   d6242:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6244:	4628      	mov	r0, r5
   d6246:	f7ff ffec 	bl	d6222 <_ZN5Print7printlnEv>
  return n;
}
   d624a:	4420      	add	r0, r4
   d624c:	bd38      	pop	{r3, r4, r5, pc}

000d624e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d624e:	b530      	push	{r4, r5, lr}
   d6250:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6252:	2300      	movs	r3, #0
   d6254:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6258:	2a01      	cmp	r2, #1
   d625a:	bf98      	it	ls
   d625c:	220a      	movls	r2, #10
   d625e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6260:	460d      	mov	r5, r1
   d6262:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6266:	fb01 5312 	mls	r3, r1, r2, r5
   d626a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d626e:	2b09      	cmp	r3, #9
   d6270:	bf94      	ite	ls
   d6272:	3330      	addls	r3, #48	; 0x30
   d6274:	3337      	addhi	r3, #55	; 0x37
   d6276:	b2db      	uxtb	r3, r3
  } while(n);
   d6278:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d627a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d627e:	d9ef      	bls.n	d6260 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6280:	4621      	mov	r1, r4
   d6282:	f7ff ffb5 	bl	d61f0 <_ZN5Print5writeEPKc>
}
   d6286:	b00b      	add	sp, #44	; 0x2c
   d6288:	bd30      	pop	{r4, r5, pc}

000d628a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d628e:	b086      	sub	sp, #24
   d6290:	af00      	add	r7, sp, #0
   d6292:	4605      	mov	r5, r0
   d6294:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6296:	1d38      	adds	r0, r7, #4
   d6298:	2114      	movs	r1, #20
{
   d629a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d629c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d629e:	f7ff fd51 	bl	d5d44 <vsnprintf>

    if (n<bufsize)
   d62a2:	2813      	cmp	r0, #19
   d62a4:	d80e      	bhi.n	d62c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d62a6:	1d39      	adds	r1, r7, #4
   d62a8:	4628      	mov	r0, r5
   d62aa:	f7ff ffa1 	bl	d61f0 <_ZN5Print5writeEPKc>
   d62ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d62b0:	b11e      	cbz	r6, d62ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d62b2:	4628      	mov	r0, r5
   d62b4:	f7ff ffb5 	bl	d6222 <_ZN5Print7printlnEv>
   d62b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d62ba:	4620      	mov	r0, r4
   d62bc:	3718      	adds	r7, #24
   d62be:	46bd      	mov	sp, r7
   d62c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d62c4:	f100 0308 	add.w	r3, r0, #8
   d62c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d62cc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d62ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d62d2:	4622      	mov	r2, r4
   d62d4:	1c41      	adds	r1, r0, #1
   d62d6:	683b      	ldr	r3, [r7, #0]
   d62d8:	4668      	mov	r0, sp
   d62da:	f7ff fd33 	bl	d5d44 <vsnprintf>
  return write(str);
   d62de:	4669      	mov	r1, sp
   d62e0:	4628      	mov	r0, r5
   d62e2:	f7ff ff85 	bl	d61f0 <_ZN5Print5writeEPKc>
   d62e6:	4604      	mov	r4, r0
   d62e8:	46c5      	mov	sp, r8
   d62ea:	e7e1      	b.n	d62b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d62ec <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d62ec:	2300      	movs	r3, #0
   d62ee:	6840      	ldr	r0, [r0, #4]
   d62f0:	461a      	mov	r2, r3
   d62f2:	4619      	mov	r1, r3
   d62f4:	f7ff bcc6 	b.w	d5c84 <network_on>

000d62f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d62f8:	4b01      	ldr	r3, [pc, #4]	; (d6300 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d62fa:	4a02      	ldr	r2, [pc, #8]	; (d6304 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d62fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d62fe:	4770      	bx	lr
   d6300:	2003e66c 	.word	0x2003e66c
   d6304:	000d7838 	.word	0x000d7838

000d6308 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6308:	4b02      	ldr	r3, [pc, #8]	; (d6314 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d630a:	681a      	ldr	r2, [r3, #0]
   d630c:	4b02      	ldr	r3, [pc, #8]	; (d6318 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d630e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6310:	4770      	bx	lr
   d6312:	bf00      	nop
   d6314:	2003e564 	.word	0x2003e564
   d6318:	2003e670 	.word	0x2003e670

000d631c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d631c:	2100      	movs	r1, #0
   d631e:	f7ff bc6d 	b.w	d5bfc <system_delay_ms>

000d6322 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6322:	b510      	push	{r4, lr}
   d6324:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6326:	f7ff ff30 	bl	d618a <_ZNSt14_Function_baseD1Ev>
   d632a:	4620      	mov	r0, r4
   d632c:	bd10      	pop	{r4, pc}
	...

000d6330 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6330:	4803      	ldr	r0, [pc, #12]	; (d6340 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6332:	4a04      	ldr	r2, [pc, #16]	; (d6344 <_GLOBAL__sub_I_RGB+0x14>)
   d6334:	4904      	ldr	r1, [pc, #16]	; (d6348 <_GLOBAL__sub_I_RGB+0x18>)
   d6336:	2300      	movs	r3, #0
   d6338:	6083      	str	r3, [r0, #8]
   d633a:	f000 bc41 	b.w	d6bc0 <__aeabi_atexit>
   d633e:	bf00      	nop
   d6340:	2003e674 	.word	0x2003e674
   d6344:	2003e5cc 	.word	0x2003e5cc
   d6348:	000d6323 	.word	0x000d6323

000d634c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d634c:	4b01      	ldr	r3, [pc, #4]	; (d6354 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d634e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6350:	4770      	bx	lr
   d6352:	bf00      	nop
   d6354:	2003e568 	.word	0x2003e568

000d6358 <serialEventRun>:
{
   d6358:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d635a:	4b0b      	ldr	r3, [pc, #44]	; (d6388 <serialEventRun+0x30>)
   d635c:	b143      	cbz	r3, d6370 <serialEventRun+0x18>
   d635e:	f000 f95b 	bl	d6618 <_Z16_fetch_usbserialv>
   d6362:	6803      	ldr	r3, [r0, #0]
   d6364:	691b      	ldr	r3, [r3, #16]
   d6366:	4798      	blx	r3
   d6368:	2800      	cmp	r0, #0
   d636a:	dd01      	ble.n	d6370 <serialEventRun+0x18>
        serialEvent();
   d636c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6370:	4b06      	ldr	r3, [pc, #24]	; (d638c <serialEventRun+0x34>)
   d6372:	b143      	cbz	r3, d6386 <serialEventRun+0x2e>
   d6374:	f000 f9ce 	bl	d6714 <_Z22__fetch_global_Serial1v>
   d6378:	6803      	ldr	r3, [r0, #0]
   d637a:	691b      	ldr	r3, [r3, #16]
   d637c:	4798      	blx	r3
   d637e:	2800      	cmp	r0, #0
   d6380:	dd01      	ble.n	d6386 <serialEventRun+0x2e>
        serialEvent1();
   d6382:	f3af 8000 	nop.w
}
   d6386:	bd08      	pop	{r3, pc}
	...

000d6390 <_post_loop>:
{
   d6390:	b508      	push	{r3, lr}
	serialEventRun();
   d6392:	f7ff ffe1 	bl	d6358 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6396:	f7ff fad9 	bl	d594c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d639a:	4b01      	ldr	r3, [pc, #4]	; (d63a0 <_post_loop+0x10>)
   d639c:	6018      	str	r0, [r3, #0]
}
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	2003e7d4 	.word	0x2003e7d4

000d63a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63a4:	4802      	ldr	r0, [pc, #8]	; (d63b0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d63a6:	4a03      	ldr	r2, [pc, #12]	; (d63b4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d63a8:	4903      	ldr	r1, [pc, #12]	; (d63b8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d63aa:	1a12      	subs	r2, r2, r0
   d63ac:	f000 bc20 	b.w	d6bf0 <memcpy>
   d63b0:	2003f400 	.word	0x2003f400
   d63b4:	2003f404 	.word	0x2003f404
   d63b8:	000d79a0 	.word	0x000d79a0

000d63bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d63bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63be:	2300      	movs	r3, #0
   d63c0:	9300      	str	r3, [sp, #0]
   d63c2:	461a      	mov	r2, r3
   d63c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d63c8:	f7ff fc32 	bl	d5c30 <system_ctrl_set_result>
}
   d63cc:	b003      	add	sp, #12
   d63ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d63d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d63d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d63d6:	8843      	ldrh	r3, [r0, #2]
   d63d8:	2b0a      	cmp	r3, #10
   d63da:	d008      	beq.n	d63ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d63dc:	2b50      	cmp	r3, #80	; 0x50
   d63de:	d10b      	bne.n	d63f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d63e0:	4b09      	ldr	r3, [pc, #36]	; (d6408 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d63e2:	681b      	ldr	r3, [r3, #0]
   d63e4:	b14b      	cbz	r3, d63fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d63e6:	b003      	add	sp, #12
   d63e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d63ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d63ee:	f7ff ffe5 	bl	d63bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d63f2:	b003      	add	sp, #12
   d63f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63f8:	2300      	movs	r3, #0
   d63fa:	9300      	str	r3, [sp, #0]
   d63fc:	461a      	mov	r2, r3
   d63fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6402:	f7ff fc15 	bl	d5c30 <system_ctrl_set_result>
}
   d6406:	e7f4      	b.n	d63f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6408:	2003e688 	.word	0x2003e688

000d640c <module_user_init_hook>:
{
   d640c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d640e:	4c12      	ldr	r4, [pc, #72]	; (d6458 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6410:	4812      	ldr	r0, [pc, #72]	; (d645c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6412:	4d13      	ldr	r5, [pc, #76]	; (d6460 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6414:	2100      	movs	r1, #0
   d6416:	f7ff fc9d 	bl	d5d54 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d641a:	6823      	ldr	r3, [r4, #0]
   d641c:	42ab      	cmp	r3, r5
   d641e:	4b11      	ldr	r3, [pc, #68]	; (d6464 <module_user_init_hook+0x58>)
   d6420:	bf0c      	ite	eq
   d6422:	2201      	moveq	r2, #1
   d6424:	2200      	movne	r2, #0
   d6426:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6428:	d002      	beq.n	d6430 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d642a:	f7ff ffbb 	bl	d63a4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d642e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6430:	f7ff fa7c 	bl	d592c <HAL_RNG_GetRandomNumber>
   d6434:	4604      	mov	r4, r0
    srand(seed);
   d6436:	f000 fbf1 	bl	d6c1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d643a:	4b0b      	ldr	r3, [pc, #44]	; (d6468 <module_user_init_hook+0x5c>)
   d643c:	b113      	cbz	r3, d6444 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d643e:	4620      	mov	r0, r4
   d6440:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6444:	2100      	movs	r1, #0
   d6446:	4808      	ldr	r0, [pc, #32]	; (d6468 <module_user_init_hook+0x5c>)
   d6448:	f7ff fc5c 	bl	d5d04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d644c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6450:	4806      	ldr	r0, [pc, #24]	; (d646c <module_user_init_hook+0x60>)
   d6452:	2100      	movs	r1, #0
   d6454:	f7ff bbe2 	b.w	d5c1c <system_ctrl_set_app_request_handler>
   d6458:	2003f400 	.word	0x2003f400
   d645c:	000d634d 	.word	0x000d634d
   d6460:	9a271c1e 	.word	0x9a271c1e
   d6464:	2003e684 	.word	0x2003e684
   d6468:	00000000 	.word	0x00000000
   d646c:	000d63d5 	.word	0x000d63d5

000d6470 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6470:	4770      	bx	lr

000d6472 <_ZN9IPAddressD0Ev>:
   d6472:	b510      	push	{r4, lr}
   d6474:	2118      	movs	r1, #24
   d6476:	4604      	mov	r4, r0
   d6478:	f000 fba7 	bl	d6bca <_ZdlPvj>
   d647c:	4620      	mov	r0, r4
   d647e:	bd10      	pop	{r4, pc}

000d6480 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6480:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6482:	7d03      	ldrb	r3, [r0, #20]
   d6484:	2b06      	cmp	r3, #6
{
   d6486:	b08d      	sub	sp, #52	; 0x34
   d6488:	460e      	mov	r6, r1
   d648a:	f100 0704 	add.w	r7, r0, #4
   d648e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6492:	d012      	beq.n	d64ba <_ZNK9IPAddress7printToER5Print+0x3a>
   d6494:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6498:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d649c:	220a      	movs	r2, #10
   d649e:	4630      	mov	r0, r6
   d64a0:	f7ff fed5 	bl	d624e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d64a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d64a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d64a8:	d019      	beq.n	d64de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d64aa:	2c00      	cmp	r4, #0
   d64ac:	d0f4      	beq.n	d6498 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d64ae:	212e      	movs	r1, #46	; 0x2e
   d64b0:	4630      	mov	r0, r6
   d64b2:	f7ff feb3 	bl	d621c <_ZN5Print5printEc>
   d64b6:	4404      	add	r4, r0
   d64b8:	e7ee      	b.n	d6498 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64ba:	232f      	movs	r3, #47	; 0x2f
   d64bc:	466a      	mov	r2, sp
   d64be:	4639      	mov	r1, r7
   d64c0:	200a      	movs	r0, #10
		buf[0] = 0;
   d64c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64c6:	f7ff fa69 	bl	d599c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d64ca:	4668      	mov	r0, sp
   d64cc:	f000 fbd2 	bl	d6c74 <strlen>
   d64d0:	6833      	ldr	r3, [r6, #0]
   d64d2:	4602      	mov	r2, r0
   d64d4:	68db      	ldr	r3, [r3, #12]
   d64d6:	4669      	mov	r1, sp
   d64d8:	4630      	mov	r0, r6
   d64da:	4798      	blx	r3
   d64dc:	4604      	mov	r4, r0
    }
    return n;
}
   d64de:	4620      	mov	r0, r4
   d64e0:	b00d      	add	sp, #52	; 0x34
   d64e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d64e4:	b510      	push	{r4, lr}
   d64e6:	4b05      	ldr	r3, [pc, #20]	; (d64fc <_ZN9IPAddressC1Ev+0x18>)
   d64e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d64ea:	2211      	movs	r2, #17
   d64ec:	f840 3b04 	str.w	r3, [r0], #4
   d64f0:	2100      	movs	r1, #0
   d64f2:	f000 fb8b 	bl	d6c0c <memset>
}
   d64f6:	4620      	mov	r0, r4
   d64f8:	bd10      	pop	{r4, pc}
   d64fa:	bf00      	nop
   d64fc:	000d7860 	.word	0x000d7860

000d6500 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6500:	4603      	mov	r3, r0
   d6502:	4a07      	ldr	r2, [pc, #28]	; (d6520 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6504:	b510      	push	{r4, lr}
   d6506:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d650a:	f101 0210 	add.w	r2, r1, #16
   d650e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6512:	f843 4b04 	str.w	r4, [r3], #4
   d6516:	4291      	cmp	r1, r2
   d6518:	d1f9      	bne.n	d650e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d651a:	780a      	ldrb	r2, [r1, #0]
   d651c:	701a      	strb	r2, [r3, #0]
}
   d651e:	bd10      	pop	{r4, pc}
   d6520:	000d7860 	.word	0x000d7860

000d6524 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6524:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6526:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d652a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d652e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6532:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6536:	2304      	movs	r3, #4
   d6538:	6041      	str	r1, [r0, #4]
   d653a:	7503      	strb	r3, [r0, #20]
}
   d653c:	bd10      	pop	{r4, pc}
	...

000d6540 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6540:	b513      	push	{r0, r1, r4, lr}
   d6542:	4b05      	ldr	r3, [pc, #20]	; (d6558 <_ZN9IPAddressC1EPKh+0x18>)
   d6544:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6546:	78cb      	ldrb	r3, [r1, #3]
   d6548:	9300      	str	r3, [sp, #0]
   d654a:	788b      	ldrb	r3, [r1, #2]
   d654c:	784a      	ldrb	r2, [r1, #1]
   d654e:	7809      	ldrb	r1, [r1, #0]
   d6550:	f7ff ffe8 	bl	d6524 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6554:	b002      	add	sp, #8
   d6556:	bd10      	pop	{r4, pc}
   d6558:	000d7860 	.word	0x000d7860

000d655c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d655c:	7441      	strb	r1, [r0, #17]
}
   d655e:	4770      	bx	lr

000d6560 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6560:	4770      	bx	lr

000d6562 <_ZN9USBSerial4readEv>:
{
   d6562:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6564:	2100      	movs	r1, #0
   d6566:	7c00      	ldrb	r0, [r0, #16]
   d6568:	f7ff fb20 	bl	d5bac <HAL_USB_USART_Receive_Data>
}
   d656c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6570:	bd08      	pop	{r3, pc}

000d6572 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6572:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6574:	2101      	movs	r1, #1
   d6576:	7c00      	ldrb	r0, [r0, #16]
   d6578:	f7ff fb18 	bl	d5bac <HAL_USB_USART_Receive_Data>
}
   d657c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6580:	bd08      	pop	{r3, pc}

000d6582 <_ZN9USBSerial17availableForWriteEv>:
{
   d6582:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6584:	7c00      	ldrb	r0, [r0, #16]
   d6586:	f7ff fb09 	bl	d5b9c <HAL_USB_USART_Available_Data_For_Write>
}
   d658a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d658e:	bd08      	pop	{r3, pc}

000d6590 <_ZN9USBSerial9availableEv>:
{
   d6590:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6592:	7c00      	ldrb	r0, [r0, #16]
   d6594:	f7ff fafa 	bl	d5b8c <HAL_USB_USART_Available_Data>
}
   d6598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d659c:	bd08      	pop	{r3, pc}

000d659e <_ZN9USBSerial5writeEh>:
{
   d659e:	b513      	push	{r0, r1, r4, lr}
   d65a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65a2:	7c00      	ldrb	r0, [r0, #16]
{
   d65a4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65a6:	f7ff faf9 	bl	d5b9c <HAL_USB_USART_Available_Data_For_Write>
   d65aa:	2800      	cmp	r0, #0
   d65ac:	9901      	ldr	r1, [sp, #4]
   d65ae:	dc01      	bgt.n	d65b4 <_ZN9USBSerial5writeEh+0x16>
   d65b0:	7c60      	ldrb	r0, [r4, #17]
   d65b2:	b120      	cbz	r0, d65be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d65b4:	7c20      	ldrb	r0, [r4, #16]
   d65b6:	f7ff fb01 	bl	d5bbc <HAL_USB_USART_Send_Data>
   d65ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d65be:	b002      	add	sp, #8
   d65c0:	bd10      	pop	{r4, pc}

000d65c2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d65c2:	7c00      	ldrb	r0, [r0, #16]
   d65c4:	f7ff bb02 	b.w	d5bcc <HAL_USB_USART_Flush_Data>

000d65c8 <_ZN9USBSerialD0Ev>:
   d65c8:	b510      	push	{r4, lr}
   d65ca:	2114      	movs	r1, #20
   d65cc:	4604      	mov	r4, r0
   d65ce:	f000 fafc 	bl	d6bca <_ZdlPvj>
   d65d2:	4620      	mov	r0, r4
   d65d4:	bd10      	pop	{r4, pc}
	...

000d65d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d65da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65de:	4604      	mov	r4, r0
   d65e0:	4608      	mov	r0, r1
   d65e2:	2100      	movs	r1, #0
   d65e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d65e8:	4b04      	ldr	r3, [pc, #16]	; (d65fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d65ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d65ec:	2301      	movs	r3, #1
  _serial = serial;
   d65ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d65f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d65f2:	4611      	mov	r1, r2
   d65f4:	f7ff faba 	bl	d5b6c <HAL_USB_USART_Init>
}
   d65f8:	4620      	mov	r0, r4
   d65fa:	bd10      	pop	{r4, pc}
   d65fc:	000d7874 	.word	0x000d7874

000d6600 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6600:	7c00      	ldrb	r0, [r0, #16]
   d6602:	2200      	movs	r2, #0
   d6604:	f7ff baba 	b.w	d5b7c <HAL_USB_USART_Begin>

000d6608 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6608:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d660a:	2214      	movs	r2, #20
{
   d660c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d660e:	2100      	movs	r1, #0
   d6610:	f000 fafc 	bl	d6c0c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6614:	4620      	mov	r0, r4
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6618:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d661a:	4c10      	ldr	r4, [pc, #64]	; (d665c <_Z16_fetch_usbserialv+0x44>)
{
   d661c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d661e:	a803      	add	r0, sp, #12
   d6620:	f7ff fff2 	bl	d6608 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6624:	7821      	ldrb	r1, [r4, #0]
   d6626:	f3bf 8f5b 	dmb	ish
   d662a:	f011 0101 	ands.w	r1, r1, #1
   d662e:	d111      	bne.n	d6654 <_Z16_fetch_usbserialv+0x3c>
   d6630:	4620      	mov	r0, r4
   d6632:	9101      	str	r1, [sp, #4]
   d6634:	f7fd fd3c 	bl	d40b0 <__cxa_guard_acquire>
   d6638:	9901      	ldr	r1, [sp, #4]
   d663a:	b158      	cbz	r0, d6654 <_Z16_fetch_usbserialv+0x3c>
   d663c:	aa03      	add	r2, sp, #12
   d663e:	4808      	ldr	r0, [pc, #32]	; (d6660 <_Z16_fetch_usbserialv+0x48>)
   d6640:	f7ff ffca 	bl	d65d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6644:	4620      	mov	r0, r4
   d6646:	f7fd fd38 	bl	d40ba <__cxa_guard_release>
   d664a:	4a06      	ldr	r2, [pc, #24]	; (d6664 <_Z16_fetch_usbserialv+0x4c>)
   d664c:	4906      	ldr	r1, [pc, #24]	; (d6668 <_Z16_fetch_usbserialv+0x50>)
   d664e:	4804      	ldr	r0, [pc, #16]	; (d6660 <_Z16_fetch_usbserialv+0x48>)
   d6650:	f000 fab6 	bl	d6bc0 <__aeabi_atexit>
	return _usbserial;
}
   d6654:	4802      	ldr	r0, [pc, #8]	; (d6660 <_Z16_fetch_usbserialv+0x48>)
   d6656:	b008      	add	sp, #32
   d6658:	bd10      	pop	{r4, pc}
   d665a:	bf00      	nop
   d665c:	2003e68c 	.word	0x2003e68c
   d6660:	2003e690 	.word	0x2003e690
   d6664:	2003e5cc 	.word	0x2003e5cc
   d6668:	000d6561 	.word	0x000d6561

000d666c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d666c:	4770      	bx	lr

000d666e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d666e:	7441      	strb	r1, [r0, #17]
}
   d6670:	4770      	bx	lr

000d6672 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6672:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6674:	7c00      	ldrb	r0, [r0, #16]
   d6676:	f7ff f9d1 	bl	d5a1c <hal_usart_available_data_for_write>
}
   d667a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d667e:	bd08      	pop	{r3, pc}

000d6680 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6680:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6682:	7c00      	ldrb	r0, [r0, #16]
   d6684:	f7ff f9a2 	bl	d59cc <hal_usart_available>
}
   d6688:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d668c:	bd08      	pop	{r3, pc}

000d668e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d668e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6690:	7c00      	ldrb	r0, [r0, #16]
   d6692:	f7ff f9ab 	bl	d59ec <hal_usart_peek>
}
   d6696:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d669a:	bd08      	pop	{r3, pc}

000d669c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d669c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d669e:	7c00      	ldrb	r0, [r0, #16]
   d66a0:	f7ff f99c 	bl	d59dc <hal_usart_read>
}
   d66a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66a8:	bd08      	pop	{r3, pc}

000d66aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d66aa:	7c00      	ldrb	r0, [r0, #16]
   d66ac:	f7ff b9a6 	b.w	d59fc <hal_usart_flush>

000d66b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d66b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d66b2:	7c45      	ldrb	r5, [r0, #17]
{
   d66b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d66b6:	b12d      	cbz	r5, d66c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d66b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d66ba:	b003      	add	sp, #12
   d66bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d66c0:	f7ff b97c 	b.w	d59bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d66c4:	7c00      	ldrb	r0, [r0, #16]
   d66c6:	9101      	str	r1, [sp, #4]
   d66c8:	f7ff f9a8 	bl	d5a1c <hal_usart_available_data_for_write>
   d66cc:	2800      	cmp	r0, #0
   d66ce:	9901      	ldr	r1, [sp, #4]
   d66d0:	dcf2      	bgt.n	d66b8 <_ZN11USARTSerial5writeEh+0x8>
}
   d66d2:	4628      	mov	r0, r5
   d66d4:	b003      	add	sp, #12
   d66d6:	bd30      	pop	{r4, r5, pc}

000d66d8 <_ZN11USARTSerialD0Ev>:
   d66d8:	b510      	push	{r4, lr}
   d66da:	2114      	movs	r1, #20
   d66dc:	4604      	mov	r4, r0
   d66de:	f000 fa74 	bl	d6bca <_ZdlPvj>
   d66e2:	4620      	mov	r0, r4
   d66e4:	bd10      	pop	{r4, pc}
	...

000d66e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d66e8:	b510      	push	{r4, lr}
   d66ea:	f04f 0c00 	mov.w	ip, #0
   d66ee:	4604      	mov	r4, r0
   d66f0:	4608      	mov	r0, r1
   d66f2:	4611      	mov	r1, r2
   d66f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d66fc:	4a04      	ldr	r2, [pc, #16]	; (d6710 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d66fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6700:	2201      	movs	r2, #1
  _serial = serial;
   d6702:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6704:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6706:	461a      	mov	r2, r3
   d6708:	f7ff f950 	bl	d59ac <hal_usart_init>
}
   d670c:	4620      	mov	r0, r4
   d670e:	bd10      	pop	{r4, pc}
   d6710:	000d78a4 	.word	0x000d78a4

000d6714 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6714:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6716:	4c0e      	ldr	r4, [pc, #56]	; (d6750 <_Z22__fetch_global_Serial1v+0x3c>)
   d6718:	7821      	ldrb	r1, [r4, #0]
   d671a:	f3bf 8f5b 	dmb	ish
   d671e:	f011 0101 	ands.w	r1, r1, #1
   d6722:	d112      	bne.n	d674a <_Z22__fetch_global_Serial1v+0x36>
   d6724:	4620      	mov	r0, r4
   d6726:	9101      	str	r1, [sp, #4]
   d6728:	f7fd fcc2 	bl	d40b0 <__cxa_guard_acquire>
   d672c:	9901      	ldr	r1, [sp, #4]
   d672e:	b160      	cbz	r0, d674a <_Z22__fetch_global_Serial1v+0x36>
   d6730:	4a08      	ldr	r2, [pc, #32]	; (d6754 <_Z22__fetch_global_Serial1v+0x40>)
   d6732:	4b09      	ldr	r3, [pc, #36]	; (d6758 <_Z22__fetch_global_Serial1v+0x44>)
   d6734:	4809      	ldr	r0, [pc, #36]	; (d675c <_Z22__fetch_global_Serial1v+0x48>)
   d6736:	f7ff ffd7 	bl	d66e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d673a:	4620      	mov	r0, r4
   d673c:	f7fd fcbd 	bl	d40ba <__cxa_guard_release>
   d6740:	4a07      	ldr	r2, [pc, #28]	; (d6760 <_Z22__fetch_global_Serial1v+0x4c>)
   d6742:	4908      	ldr	r1, [pc, #32]	; (d6764 <_Z22__fetch_global_Serial1v+0x50>)
   d6744:	4805      	ldr	r0, [pc, #20]	; (d675c <_Z22__fetch_global_Serial1v+0x48>)
   d6746:	f000 fa3b 	bl	d6bc0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d674a:	4804      	ldr	r0, [pc, #16]	; (d675c <_Z22__fetch_global_Serial1v+0x48>)
   d674c:	b002      	add	sp, #8
   d674e:	bd10      	pop	{r4, pc}
   d6750:	2003e6a4 	.word	0x2003e6a4
   d6754:	2003e6a8 	.word	0x2003e6a8
   d6758:	2003e72c 	.word	0x2003e72c
   d675c:	2003e7b0 	.word	0x2003e7b0
   d6760:	2003e5cc 	.word	0x2003e5cc
   d6764:	000d666d 	.word	0x000d666d

000d6768 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6768:	4770      	bx	lr

000d676a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d676a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d676c:	4606      	mov	r6, r0
   d676e:	4615      	mov	r5, r2
   d6770:	460c      	mov	r4, r1
   d6772:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6774:	42bc      	cmp	r4, r7
   d6776:	d006      	beq.n	d6786 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6778:	6833      	ldr	r3, [r6, #0]
   d677a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d677e:	689b      	ldr	r3, [r3, #8]
   d6780:	4630      	mov	r0, r6
   d6782:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6784:	e7f6      	b.n	d6774 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6786:	4628      	mov	r0, r5
   d6788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d678a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d678a:	7c00      	ldrb	r0, [r0, #16]
   d678c:	2200      	movs	r2, #0
   d678e:	f7ff b96d 	b.w	d5a6c <hal_i2c_write>

000d6792 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6792:	7c00      	ldrb	r0, [r0, #16]
   d6794:	2100      	movs	r1, #0
   d6796:	f7ff b971 	b.w	d5a7c <hal_i2c_available>

000d679a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d679a:	7c00      	ldrb	r0, [r0, #16]
   d679c:	2100      	movs	r1, #0
   d679e:	f7ff b975 	b.w	d5a8c <hal_i2c_read>

000d67a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d67a2:	7c00      	ldrb	r0, [r0, #16]
   d67a4:	2100      	movs	r1, #0
   d67a6:	f7ff b979 	b.w	d5a9c <hal_i2c_peek>

000d67aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d67aa:	7c00      	ldrb	r0, [r0, #16]
   d67ac:	2100      	movs	r1, #0
   d67ae:	f7ff b97d 	b.w	d5aac <hal_i2c_flush>

000d67b2 <_ZN7TwoWireD0Ev>:
   d67b2:	b510      	push	{r4, lr}
   d67b4:	2114      	movs	r1, #20
   d67b6:	4604      	mov	r4, r0
   d67b8:	f000 fa07 	bl	d6bca <_ZdlPvj>
   d67bc:	4620      	mov	r0, r4
   d67be:	bd10      	pop	{r4, pc}

000d67c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d67c0:	b510      	push	{r4, lr}
   d67c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67c6:	4604      	mov	r4, r0
   d67c8:	4608      	mov	r0, r1
   d67ca:	2100      	movs	r1, #0
   d67cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d67d0:	4b03      	ldr	r3, [pc, #12]	; (d67e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d67d2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d67d4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d67d6:	4611      	mov	r1, r2
   d67d8:	f7ff f978 	bl	d5acc <hal_i2c_init>
}
   d67dc:	4620      	mov	r0, r4
   d67de:	bd10      	pop	{r4, pc}
   d67e0:	000d78d4 	.word	0x000d78d4

000d67e4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d67e4:	7c00      	ldrb	r0, [r0, #16]
   d67e6:	2200      	movs	r2, #0
   d67e8:	f7ff b920 	b.w	d5a2c <hal_i2c_set_speed>

000d67ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d67ec:	2300      	movs	r3, #0
   d67ee:	7c00      	ldrb	r0, [r0, #16]
   d67f0:	461a      	mov	r2, r3
   d67f2:	4619      	mov	r1, r3
   d67f4:	f7ff b922 	b.w	d5a3c <hal_i2c_begin>

000d67f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d67f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d67fa:	2200      	movs	r2, #0
   d67fc:	2314      	movs	r3, #20
   d67fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6802:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6806:	780b      	ldrb	r3, [r1, #0]
   d6808:	f88d 3008 	strb.w	r3, [sp, #8]
   d680c:	684b      	ldr	r3, [r1, #4]
   d680e:	9303      	str	r3, [sp, #12]
   d6810:	68cb      	ldr	r3, [r1, #12]
   d6812:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6814:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6816:	7a0b      	ldrb	r3, [r1, #8]
   d6818:	9305      	str	r3, [sp, #20]
   d681a:	a901      	add	r1, sp, #4
   d681c:	f7ff f95e 	bl	d5adc <hal_i2c_request_ex>
}
   d6820:	b007      	add	sp, #28
   d6822:	f85d fb04 	ldr.w	pc, [sp], #4

000d6826 <_ZN7TwoWire11requestFromEhjh>:
{
   d6826:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6828:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d682a:	f88d 1000 	strb.w	r1, [sp]
   d682e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6832:	9103      	str	r1, [sp, #12]
   d6834:	bf18      	it	ne
   d6836:	2301      	movne	r3, #1
   d6838:	4669      	mov	r1, sp
    size_ = size;
   d683a:	9201      	str	r2, [sp, #4]
   d683c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6840:	f7ff ffda 	bl	d67f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6844:	b005      	add	sp, #20
   d6846:	f85d fb04 	ldr.w	pc, [sp], #4

000d684a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d684a:	2301      	movs	r3, #1
   d684c:	f7ff bfeb 	b.w	d6826 <_ZN7TwoWire11requestFromEhjh>

000d6850 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6850:	7c00      	ldrb	r0, [r0, #16]
   d6852:	2200      	movs	r2, #0
   d6854:	f7ff b8fa 	b.w	d5a4c <hal_i2c_begin_transmission>

000d6858 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6858:	b2c9      	uxtb	r1, r1
   d685a:	f7ff bff9 	b.w	d6850 <_ZN7TwoWire17beginTransmissionEh>

000d685e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d685e:	7c00      	ldrb	r0, [r0, #16]
   d6860:	2200      	movs	r2, #0
   d6862:	f7ff b8fb 	b.w	d5a5c <hal_i2c_end_transmission>

000d6866 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6866:	2101      	movs	r1, #1
   d6868:	f7ff bff9 	b.w	d685e <_ZN7TwoWire15endTransmissionEh>

000d686c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d686c:	2200      	movs	r2, #0
   d686e:	6840      	ldr	r0, [r0, #4]
   d6870:	4611      	mov	r1, r2
   d6872:	f7ff b9ff 	b.w	d5c74 <network_ready>

000d6876 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6876:	2200      	movs	r2, #0
   d6878:	6840      	ldr	r0, [r0, #4]
   d687a:	4611      	mov	r1, r2
   d687c:	f7ff ba1a 	b.w	d5cb4 <network_listening>

000d6880 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6880:	2200      	movs	r2, #0
   d6882:	6840      	ldr	r0, [r0, #4]
   d6884:	4611      	mov	r1, r2
   d6886:	f7ff ba25 	b.w	d5cd4 <network_get_listen_timeout>

000d688a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d688a:	6840      	ldr	r0, [r0, #4]
   d688c:	2200      	movs	r2, #0
   d688e:	f7ff ba19 	b.w	d5cc4 <network_set_listen_timeout>

000d6892 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6892:	6840      	ldr	r0, [r0, #4]
   d6894:	2200      	movs	r2, #0
   d6896:	f081 0101 	eor.w	r1, r1, #1
   d689a:	f7ff ba03 	b.w	d5ca4 <network_listen>

000d689e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d689e:	2300      	movs	r3, #0
   d68a0:	6840      	ldr	r0, [r0, #4]
   d68a2:	461a      	mov	r2, r3
   d68a4:	4619      	mov	r1, r3
   d68a6:	f7ff b9f5 	b.w	d5c94 <network_off>

000d68aa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d68aa:	2200      	movs	r2, #0
   d68ac:	6840      	ldr	r0, [r0, #4]
   d68ae:	4611      	mov	r1, r2
   d68b0:	f7ff b9d0 	b.w	d5c54 <network_connecting>

000d68b4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68b4:	6840      	ldr	r0, [r0, #4]
   d68b6:	2200      	movs	r2, #0
   d68b8:	2102      	movs	r1, #2
   d68ba:	f7ff b9d3 	b.w	d5c64 <network_disconnect>

000d68be <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68be:	2300      	movs	r3, #0
   d68c0:	6840      	ldr	r0, [r0, #4]
   d68c2:	461a      	mov	r2, r3
   d68c4:	f7ff b9be 	b.w	d5c44 <network_connect>

000d68c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68c8:	4b02      	ldr	r3, [pc, #8]	; (d68d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68ca:	2204      	movs	r2, #4
   d68cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d68ce:	4a02      	ldr	r2, [pc, #8]	; (d68d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d68d0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d68d2:	4770      	bx	lr
   d68d4:	2003e7c4 	.word	0x2003e7c4
   d68d8:	000d78fc 	.word	0x000d78fc

000d68dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d68dc:	2300      	movs	r3, #0
   d68de:	6840      	ldr	r0, [r0, #4]
   d68e0:	461a      	mov	r2, r3
   d68e2:	f7ff b9af 	b.w	d5c44 <network_connect>

000d68e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d68e6:	6840      	ldr	r0, [r0, #4]
   d68e8:	2200      	movs	r2, #0
   d68ea:	2102      	movs	r1, #2
   d68ec:	f7ff b9ba 	b.w	d5c64 <network_disconnect>

000d68f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d68f0:	2200      	movs	r2, #0
   d68f2:	6840      	ldr	r0, [r0, #4]
   d68f4:	4611      	mov	r1, r2
   d68f6:	f7ff b9ad 	b.w	d5c54 <network_connecting>

000d68fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d68fa:	2200      	movs	r2, #0
   d68fc:	6840      	ldr	r0, [r0, #4]
   d68fe:	4611      	mov	r1, r2
   d6900:	f7ff b9b8 	b.w	d5c74 <network_ready>

000d6904 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6904:	2300      	movs	r3, #0
   d6906:	6840      	ldr	r0, [r0, #4]
   d6908:	461a      	mov	r2, r3
   d690a:	4619      	mov	r1, r3
   d690c:	f7ff b9ba 	b.w	d5c84 <network_on>

000d6910 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6910:	2300      	movs	r3, #0
   d6912:	6840      	ldr	r0, [r0, #4]
   d6914:	461a      	mov	r2, r3
   d6916:	4619      	mov	r1, r3
   d6918:	f7ff b9bc 	b.w	d5c94 <network_off>

000d691c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d691c:	6840      	ldr	r0, [r0, #4]
   d691e:	2100      	movs	r1, #0
   d6920:	f7ff b9e0 	b.w	d5ce4 <network_is_on>

000d6924 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6924:	6840      	ldr	r0, [r0, #4]
   d6926:	2100      	movs	r1, #0
   d6928:	f7ff b9e4 	b.w	d5cf4 <network_is_off>

000d692c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d692c:	6840      	ldr	r0, [r0, #4]
   d692e:	2200      	movs	r2, #0
   d6930:	f081 0101 	eor.w	r1, r1, #1
   d6934:	f7ff b9b6 	b.w	d5ca4 <network_listen>

000d6938 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6938:	6840      	ldr	r0, [r0, #4]
   d693a:	2200      	movs	r2, #0
   d693c:	f7ff b9c2 	b.w	d5cc4 <network_set_listen_timeout>

000d6940 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6940:	2200      	movs	r2, #0
   d6942:	6840      	ldr	r0, [r0, #4]
   d6944:	4611      	mov	r1, r2
   d6946:	f7ff b9c5 	b.w	d5cd4 <network_get_listen_timeout>

000d694a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d694a:	2200      	movs	r2, #0
   d694c:	6840      	ldr	r0, [r0, #4]
   d694e:	4611      	mov	r1, r2
   d6950:	f7ff b9b0 	b.w	d5cb4 <network_listening>

000d6954 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6958:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d695a:	b095      	sub	sp, #84	; 0x54
   d695c:	4616      	mov	r6, r2
   d695e:	460d      	mov	r5, r1
   d6960:	4607      	mov	r7, r0
    IPAddress addr;
   d6962:	f7ff fdbf 	bl	d64e4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6966:	4621      	mov	r1, r4
   d6968:	2218      	movs	r2, #24
   d696a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d696c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d696e:	f000 f94d 	bl	d6c0c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6972:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6974:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6978:	4621      	mov	r1, r4
   d697a:	466b      	mov	r3, sp
   d697c:	aa0c      	add	r2, sp, #48	; 0x30
   d697e:	4630      	mov	r0, r6
   d6980:	f7fe ffac 	bl	d58dc <netdb_getaddrinfo>
    if (!r) {
   d6984:	4604      	mov	r4, r0
   d6986:	2800      	cmp	r0, #0
   d6988:	d14c      	bne.n	d6a24 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d698a:	4602      	mov	r2, r0
   d698c:	2101      	movs	r1, #1
   d698e:	6868      	ldr	r0, [r5, #4]
   d6990:	f7ff f970 	bl	d5c74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6994:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6996:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6998:	4622      	mov	r2, r4
   d699a:	6868      	ldr	r0, [r5, #4]
   d699c:	f7ff f96a 	bl	d5c74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69a2:	4681      	mov	r9, r0
        bool ok = false;
   d69a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69a6:	2e00      	cmp	r6, #0
   d69a8:	d03c      	beq.n	d6a24 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d69aa:	2900      	cmp	r1, #0
   d69ac:	d13a      	bne.n	d6a24 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d69ae:	6873      	ldr	r3, [r6, #4]
   d69b0:	2b02      	cmp	r3, #2
   d69b2:	d003      	beq.n	d69bc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d69b4:	2b0a      	cmp	r3, #10
   d69b6:	d011      	beq.n	d69dc <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69b8:	69f6      	ldr	r6, [r6, #28]
   d69ba:	e7f4      	b.n	d69a6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d69bc:	f1b8 0f00 	cmp.w	r8, #0
   d69c0:	d00a      	beq.n	d69d8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d69c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d69c4:	a806      	add	r0, sp, #24
   d69c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d69c8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d69ca:	f7ff fdb9 	bl	d6540 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d69ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69d0:	1d3c      	adds	r4, r7, #4
   d69d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69d4:	682b      	ldr	r3, [r5, #0]
   d69d6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d69d8:	4641      	mov	r1, r8
   d69da:	e7ed      	b.n	d69b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d69dc:	f1b9 0f00 	cmp.w	r9, #0
   d69e0:	d101      	bne.n	d69e6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d69e2:	4649      	mov	r1, r9
   d69e4:	e7e8      	b.n	d69b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d69e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d69e8:	2210      	movs	r2, #16
   d69ea:	a801      	add	r0, sp, #4
   d69ec:	f000 f90e 	bl	d6c0c <memset>
                    a.v = 6;
   d69f0:	2306      	movs	r3, #6
   d69f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d69f6:	ad01      	add	r5, sp, #4
   d69f8:	f104 0308 	add.w	r3, r4, #8
   d69fc:	3418      	adds	r4, #24
   d69fe:	6818      	ldr	r0, [r3, #0]
   d6a00:	6859      	ldr	r1, [r3, #4]
   d6a02:	462a      	mov	r2, r5
   d6a04:	c203      	stmia	r2!, {r0, r1}
   d6a06:	3308      	adds	r3, #8
   d6a08:	42a3      	cmp	r3, r4
   d6a0a:	4615      	mov	r5, r2
   d6a0c:	d1f7      	bne.n	d69fe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6a0e:	a901      	add	r1, sp, #4
   d6a10:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6a12:	ad07      	add	r5, sp, #28
   d6a14:	f7ff fd74 	bl	d6500 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a1a:	1d3c      	adds	r4, r7, #4
   d6a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a1e:	682b      	ldr	r3, [r5, #0]
   d6a20:	7023      	strb	r3, [r4, #0]
   d6a22:	e7de      	b.n	d69e2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6a24:	9800      	ldr	r0, [sp, #0]
   d6a26:	f7fe ff51 	bl	d58cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6a2a:	4638      	mov	r0, r7
   d6a2c:	b015      	add	sp, #84	; 0x54
   d6a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6a34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6a34:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6a36:	4a03      	ldr	r2, [pc, #12]	; (d6a44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6a38:	601a      	str	r2, [r3, #0]
   d6a3a:	2200      	movs	r2, #0
   d6a3c:	605a      	str	r2, [r3, #4]

} // spark
   d6a3e:	4770      	bx	lr
   d6a40:	2003e7cc 	.word	0x2003e7cc
   d6a44:	000d7938 	.word	0x000d7938

000d6a48 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a48:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a4a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6a4c:	d902      	bls.n	d6a54 <pinAvailable+0xc>
    return false;
   d6a4e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6a50:	b002      	add	sp, #8
   d6a52:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6a54:	f1a0 030b 	sub.w	r3, r0, #11
   d6a58:	2b02      	cmp	r3, #2
   d6a5a:	d81a      	bhi.n	d6a92 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6a5c:	4c17      	ldr	r4, [pc, #92]	; (d6abc <pinAvailable+0x74>)
   d6a5e:	7821      	ldrb	r1, [r4, #0]
   d6a60:	f3bf 8f5b 	dmb	ish
   d6a64:	f011 0101 	ands.w	r1, r1, #1
   d6a68:	d10b      	bne.n	d6a82 <pinAvailable+0x3a>
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	9101      	str	r1, [sp, #4]
   d6a6e:	f7fd fb1f 	bl	d40b0 <__cxa_guard_acquire>
   d6a72:	9901      	ldr	r1, [sp, #4]
   d6a74:	b128      	cbz	r0, d6a82 <pinAvailable+0x3a>
   d6a76:	4812      	ldr	r0, [pc, #72]	; (d6ac0 <pinAvailable+0x78>)
   d6a78:	f7ff f9b8 	bl	d5dec <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	f7fd fb1c 	bl	d40ba <__cxa_guard_release>
   d6a82:	4b0f      	ldr	r3, [pc, #60]	; (d6ac0 <pinAvailable+0x78>)
   d6a84:	7818      	ldrb	r0, [r3, #0]
   d6a86:	f7ff f849 	bl	d5b1c <hal_spi_is_enabled>
   d6a8a:	2800      	cmp	r0, #0
   d6a8c:	d1df      	bne.n	d6a4e <pinAvailable+0x6>
  return true; // 'pin' is available
   d6a8e:	2001      	movs	r0, #1
   d6a90:	e7de      	b.n	d6a50 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6a92:	2801      	cmp	r0, #1
   d6a94:	d809      	bhi.n	d6aaa <pinAvailable+0x62>
   d6a96:	f000 f86b 	bl	d6b70 <_Z19__fetch_global_Wirev>
   d6a9a:	2100      	movs	r1, #0
   d6a9c:	7c00      	ldrb	r0, [r0, #16]
   d6a9e:	f7ff f80d 	bl	d5abc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6aa2:	f080 0001 	eor.w	r0, r0, #1
   d6aa6:	b2c0      	uxtb	r0, r0
   d6aa8:	e7d2      	b.n	d6a50 <pinAvailable+0x8>
   d6aaa:	3809      	subs	r0, #9
   d6aac:	2801      	cmp	r0, #1
   d6aae:	d8ee      	bhi.n	d6a8e <pinAvailable+0x46>
   d6ab0:	f7ff fe30 	bl	d6714 <_Z22__fetch_global_Serial1v>
   d6ab4:	7c00      	ldrb	r0, [r0, #16]
   d6ab6:	f7fe ffa9 	bl	d5a0c <hal_usart_is_enabled>
   d6aba:	e7f2      	b.n	d6aa2 <pinAvailable+0x5a>
   d6abc:	2003e644 	.word	0x2003e644
   d6ac0:	2003e648 	.word	0x2003e648

000d6ac4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ac4:	2823      	cmp	r0, #35	; 0x23
{
   d6ac6:	b538      	push	{r3, r4, r5, lr}
   d6ac8:	4604      	mov	r4, r0
   d6aca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6acc:	d80a      	bhi.n	d6ae4 <pinMode+0x20>
   d6ace:	29ff      	cmp	r1, #255	; 0xff
   d6ad0:	d008      	beq.n	d6ae4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6ad2:	f7ff ffb9 	bl	d6a48 <pinAvailable>
   d6ad6:	b128      	cbz	r0, d6ae4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6ad8:	4629      	mov	r1, r5
   d6ada:	4620      	mov	r0, r4
}
   d6adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ae0:	f7fe bf04 	b.w	d58ec <HAL_Pin_Mode>
}
   d6ae4:	bd38      	pop	{r3, r4, r5, pc}

000d6ae6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6ae6:	b538      	push	{r3, r4, r5, lr}
   d6ae8:	4604      	mov	r4, r0
   d6aea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6aec:	f7fe ff06 	bl	d58fc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6af0:	28ff      	cmp	r0, #255	; 0xff
   d6af2:	d010      	beq.n	d6b16 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6af4:	2806      	cmp	r0, #6
   d6af6:	d804      	bhi.n	d6b02 <digitalWrite+0x1c>
   d6af8:	234d      	movs	r3, #77	; 0x4d
   d6afa:	fa23 f000 	lsr.w	r0, r3, r0
   d6afe:	07c3      	lsls	r3, r0, #31
   d6b00:	d409      	bmi.n	d6b16 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6b02:	4620      	mov	r0, r4
   d6b04:	f7ff ffa0 	bl	d6a48 <pinAvailable>
   d6b08:	b128      	cbz	r0, d6b16 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6b0a:	4629      	mov	r1, r5
   d6b0c:	4620      	mov	r0, r4
}
   d6b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6b12:	f7fe befb 	b.w	d590c <HAL_GPIO_Write>
}
   d6b16:	bd38      	pop	{r3, r4, r5, pc}

000d6b18 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6b18:	b510      	push	{r4, lr}
   d6b1a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b1c:	f7fe feee 	bl	d58fc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6b20:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6b22:	b2db      	uxtb	r3, r3
   d6b24:	2b01      	cmp	r3, #1
   d6b26:	d908      	bls.n	d6b3a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6b28:	4620      	mov	r0, r4
   d6b2a:	f7ff ff8d 	bl	d6a48 <pinAvailable>
   d6b2e:	b120      	cbz	r0, d6b3a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6b30:	4620      	mov	r0, r4
}
   d6b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6b36:	f7fe bef1 	b.w	d591c <HAL_GPIO_Read>
}
   d6b3a:	2000      	movs	r0, #0
   d6b3c:	bd10      	pop	{r4, pc}
	...

000d6b40 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6b40:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6b42:	2300      	movs	r3, #0
   d6b44:	2520      	movs	r5, #32
   d6b46:	8043      	strh	r3, [r0, #2]
   d6b48:	2314      	movs	r3, #20
{
   d6b4a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6b4c:	8003      	strh	r3, [r0, #0]
   d6b4e:	6085      	str	r5, [r0, #8]
   d6b50:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6b52:	4906      	ldr	r1, [pc, #24]	; (d6b6c <_Z17acquireWireBufferv+0x2c>)
   d6b54:	4628      	mov	r0, r5
   d6b56:	f000 f83a 	bl	d6bce <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6b5a:	4904      	ldr	r1, [pc, #16]	; (d6b6c <_Z17acquireWireBufferv+0x2c>)
	};
   d6b5c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6b5e:	4628      	mov	r0, r5
   d6b60:	f000 f835 	bl	d6bce <_ZnajRKSt9nothrow_t>
	};
   d6b64:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6b66:	4620      	mov	r0, r4
   d6b68:	bd38      	pop	{r3, r4, r5, pc}
   d6b6a:	bf00      	nop
   d6b6c:	000d796c 	.word	0x000d796c

000d6b70 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6b70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6b72:	4d0f      	ldr	r5, [pc, #60]	; (d6bb0 <_Z19__fetch_global_Wirev+0x40>)
   d6b74:	7829      	ldrb	r1, [r5, #0]
   d6b76:	f3bf 8f5b 	dmb	ish
   d6b7a:	f011 0401 	ands.w	r4, r1, #1
{
   d6b7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6b80:	d113      	bne.n	d6baa <_Z19__fetch_global_Wirev+0x3a>
   d6b82:	4628      	mov	r0, r5
   d6b84:	f7fd fa94 	bl	d40b0 <__cxa_guard_acquire>
   d6b88:	b178      	cbz	r0, d6baa <_Z19__fetch_global_Wirev+0x3a>
   d6b8a:	a801      	add	r0, sp, #4
   d6b8c:	f7ff ffd8 	bl	d6b40 <_Z17acquireWireBufferv>
   d6b90:	aa01      	add	r2, sp, #4
   d6b92:	4621      	mov	r1, r4
   d6b94:	4807      	ldr	r0, [pc, #28]	; (d6bb4 <_Z19__fetch_global_Wirev+0x44>)
   d6b96:	f7ff fe13 	bl	d67c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6b9a:	4628      	mov	r0, r5
   d6b9c:	f7fd fa8d 	bl	d40ba <__cxa_guard_release>
   d6ba0:	4a05      	ldr	r2, [pc, #20]	; (d6bb8 <_Z19__fetch_global_Wirev+0x48>)
   d6ba2:	4906      	ldr	r1, [pc, #24]	; (d6bbc <_Z19__fetch_global_Wirev+0x4c>)
   d6ba4:	4803      	ldr	r0, [pc, #12]	; (d6bb4 <_Z19__fetch_global_Wirev+0x44>)
   d6ba6:	f000 f80b 	bl	d6bc0 <__aeabi_atexit>
	return wire;
}
   d6baa:	4802      	ldr	r0, [pc, #8]	; (d6bb4 <_Z19__fetch_global_Wirev+0x44>)
   d6bac:	b007      	add	sp, #28
   d6bae:	bd30      	pop	{r4, r5, pc}
   d6bb0:	2003e7d8 	.word	0x2003e7d8
   d6bb4:	2003e7dc 	.word	0x2003e7dc
   d6bb8:	2003e5cc 	.word	0x2003e5cc
   d6bbc:	000d6769 	.word	0x000d6769

000d6bc0 <__aeabi_atexit>:
   d6bc0:	460b      	mov	r3, r1
   d6bc2:	4601      	mov	r1, r0
   d6bc4:	4618      	mov	r0, r3
   d6bc6:	f000 b805 	b.w	d6bd4 <__cxa_atexit>

000d6bca <_ZdlPvj>:
   d6bca:	f7fd ba64 	b.w	d4096 <_ZdlPv>

000d6bce <_ZnajRKSt9nothrow_t>:
   d6bce:	f7fd ba60 	b.w	d4092 <_Znaj>
	...

000d6bd4 <__cxa_atexit>:
   d6bd4:	b510      	push	{r4, lr}
   d6bd6:	4c05      	ldr	r4, [pc, #20]	; (d6bec <__cxa_atexit+0x18>)
   d6bd8:	4613      	mov	r3, r2
   d6bda:	b12c      	cbz	r4, d6be8 <__cxa_atexit+0x14>
   d6bdc:	460a      	mov	r2, r1
   d6bde:	4601      	mov	r1, r0
   d6be0:	2002      	movs	r0, #2
   d6be2:	f3af 8000 	nop.w
   d6be6:	bd10      	pop	{r4, pc}
   d6be8:	4620      	mov	r0, r4
   d6bea:	e7fc      	b.n	d6be6 <__cxa_atexit+0x12>
   d6bec:	00000000 	.word	0x00000000

000d6bf0 <memcpy>:
   d6bf0:	440a      	add	r2, r1
   d6bf2:	4291      	cmp	r1, r2
   d6bf4:	f100 33ff 	add.w	r3, r0, #4294967295
   d6bf8:	d100      	bne.n	d6bfc <memcpy+0xc>
   d6bfa:	4770      	bx	lr
   d6bfc:	b510      	push	{r4, lr}
   d6bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c02:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6c06:	4291      	cmp	r1, r2
   d6c08:	d1f9      	bne.n	d6bfe <memcpy+0xe>
   d6c0a:	bd10      	pop	{r4, pc}

000d6c0c <memset>:
   d6c0c:	4402      	add	r2, r0
   d6c0e:	4603      	mov	r3, r0
   d6c10:	4293      	cmp	r3, r2
   d6c12:	d100      	bne.n	d6c16 <memset+0xa>
   d6c14:	4770      	bx	lr
   d6c16:	f803 1b01 	strb.w	r1, [r3], #1
   d6c1a:	e7f9      	b.n	d6c10 <memset+0x4>

000d6c1c <srand>:
   d6c1c:	b538      	push	{r3, r4, r5, lr}
   d6c1e:	4b0d      	ldr	r3, [pc, #52]	; (d6c54 <srand+0x38>)
   d6c20:	681d      	ldr	r5, [r3, #0]
   d6c22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6c24:	4604      	mov	r4, r0
   d6c26:	b97b      	cbnz	r3, d6c48 <srand+0x2c>
   d6c28:	2018      	movs	r0, #24
   d6c2a:	f7ff f873 	bl	d5d14 <malloc>
   d6c2e:	4a0a      	ldr	r2, [pc, #40]	; (d6c58 <srand+0x3c>)
   d6c30:	4b0a      	ldr	r3, [pc, #40]	; (d6c5c <srand+0x40>)
   d6c32:	63a8      	str	r0, [r5, #56]	; 0x38
   d6c34:	e9c0 2300 	strd	r2, r3, [r0]
   d6c38:	4b09      	ldr	r3, [pc, #36]	; (d6c60 <srand+0x44>)
   d6c3a:	6083      	str	r3, [r0, #8]
   d6c3c:	230b      	movs	r3, #11
   d6c3e:	8183      	strh	r3, [r0, #12]
   d6c40:	2201      	movs	r2, #1
   d6c42:	2300      	movs	r3, #0
   d6c44:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c48:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6c4a:	2200      	movs	r2, #0
   d6c4c:	611c      	str	r4, [r3, #16]
   d6c4e:	615a      	str	r2, [r3, #20]
   d6c50:	bd38      	pop	{r3, r4, r5, pc}
   d6c52:	bf00      	nop
   d6c54:	2003e568 	.word	0x2003e568
   d6c58:	abcd330e 	.word	0xabcd330e
   d6c5c:	e66d1234 	.word	0xe66d1234
   d6c60:	0005deec 	.word	0x0005deec

000d6c64 <strcpy>:
   d6c64:	4603      	mov	r3, r0
   d6c66:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6c6a:	f803 2b01 	strb.w	r2, [r3], #1
   d6c6e:	2a00      	cmp	r2, #0
   d6c70:	d1f9      	bne.n	d6c66 <strcpy+0x2>
   d6c72:	4770      	bx	lr

000d6c74 <strlen>:
   d6c74:	4603      	mov	r3, r0
   d6c76:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6c7a:	2a00      	cmp	r2, #0
   d6c7c:	d1fb      	bne.n	d6c76 <strlen+0x2>
   d6c7e:	1a18      	subs	r0, r3, r0
   d6c80:	3801      	subs	r0, #1
   d6c82:	4770      	bx	lr

000d6c84 <dynalib_user>:
   d6c84:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6c94:	0000 0000 7250 786f 6d69 7469 2079 6156     ....Proximity Va
   d6ca4:	756c 3a65 0020 694c 6867 2074 654c 6576     lue: .Light Leve
   d6cb4:	3a6c 0020 7830 3036 6400 6665 7561 746c     l: .0x60.default
   d6cc4:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   d6cd4:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   d6ce4:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   d6cf4:	2075 7325 4d20 444f 2545 3e75                u %s MODE%u>.

000d6d01 <_ZL4font>:
   d6d01:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6d11:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6d21:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6d31:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6d41:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6d51:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6d61:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6d71:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6d81:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6d91:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6da1:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6db1:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6dc1:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6dd1:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6de1:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6df1:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6e01:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6e11:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6e21:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6e31:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6e41:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6e51:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6e61:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6e71:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6e81:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6e91:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6ea1:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6eb1:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6ec1:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6ed1:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6ee1:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6ef1:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6f01:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d6f11:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d6f21:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d6f31:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d6f41:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d6f51:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d6f61:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d6f71:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6f81:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6f91:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d6fa1:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6fb1:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d6fc1:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d6fd1:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d6fe1:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d6ff1:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d7001:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d7011:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7021:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7031:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7041:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7051:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7061:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7071:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d7081:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d7091:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d70a1:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d70b1:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d70c1:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d70d1:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d70e1:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d70f1:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d7101:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d7111:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d7121:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7131:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d7141:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d7151:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d7161:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d7171:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d7181:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d7191:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d71a1:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d71b1:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d71c1:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d71d1:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d71e1:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d71f1:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   d7201:	0000                                         ...

000d7204 <_ZTV12Adafruit_GFX>:
	...
   d7214:	4a11 000d 61c5 000d 409d 000d 4419 000d     .J...a...@...D..
   d7224:	441b 000d 444d 000d 4429 000d 443b 000d     .D..MD..)D..;D..
   d7234:	435d 000d 4419 000d 4645 000d 45bf 000d     ]C...D..EF...E..
   d7244:	4465 000d 44a3 000d 44dd 000d 4523 000d     eD...D...D..#E..
   d7254:	45c1 000d 453f 000d                         .E..?E..

000d725c <_ZTV16OledWingAdafruit>:
	...
   d7264:	4b21 000d 4b41 000d 4a11 000d 61c5 000d     !K..AK...J...a..
   d7274:	4d51 000d 4419 000d 441b 000d 444d 000d     QM...D...D..MD..
   d7284:	4429 000d 443b 000d 435d 000d 4419 000d     )D..;D..]C...D..
   d7294:	4645 000d 4f0b 000d 549f 000d 5451 000d     EF...O...T..QT..
   d72a4:	44dd 000d 4523 000d 45c1 000d 453f 000d     .D..#E...E..?E..

000d72b4 <_ZTVN8particle11SPISettingsE>:
	...
   d72bc:	4309 000d 42dd 000d 42df 000d               .C...B...B..

000d72c8 <_ZL12splash1_data>:
   d72c8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d72d8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d72e8:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d72f8:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d7308:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d7318:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d7330:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d7340:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d7350:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d7360:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d7370:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d7380:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d7390:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d73a0:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d73b0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d73c0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d73d0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d73e0:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d73f0:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d7400:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d7410:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d7420:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d7430:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d7440:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d7458:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d7470:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d7480:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d7490:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d74a0:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d74b0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d74c0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d74d0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d74e0:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d74f0:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d7500:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d7510:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d7520:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7530:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7540:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7550:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7560:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7570:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7580:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7588 <_ZL12splash2_data>:
   d7588:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7598:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d75a8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d75c4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d75d4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d75e4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d75f4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d7604:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d7614:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d7624:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7634:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7644:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7654:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7664:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7674:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7684:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7694:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d76a4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d76b4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d76c4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d76d4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d76e4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d76f4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d7704:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d771c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d772c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d773c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d774c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d775c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7768 <_ZTV16Adafruit_SSD1306>:
	...
   d7770:	4d25 000d 4d3d 000d 4a11 000d 61c5 000d     %M..=M...J...a..
   d7780:	4d51 000d 4419 000d 441b 000d 444d 000d     QM...D...D..MD..
   d7790:	4429 000d 443b 000d 435d 000d 4419 000d     )D..;D..]C...D..
   d77a0:	4645 000d 4f0b 000d 549f 000d 5451 000d     EF...O...T..QT..
   d77b0:	44dd 000d 4523 000d 45c1 000d 453f 000d     .D..#E...E..?E..

000d77c0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d77c0:	8000 e0c0 f8f0 fefc                         ........

000d77c8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d77c8:	0100 0703 1f0f 7f3f                         ......?.

000d77d0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d77d0:	d5ae a880                                   ....

000d77d4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d77d4:	00d3 8d40                                   ..@.

000d77d8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d77d8:	0020 c8a1                                    ...

000d77dc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d77dc:	40db a6a4 af2e                              .@....

000d77e2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d77e2:	02da 8f81                                   ....

000d77e6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d77e6:	12da                                         ...

000d77e9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d77e9:	02da                                         ...

000d77ec <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d77ec:	0022 21ff 0000 0000                         "..!....

000d77f4 <_ZTVN5spark13EthernetClassE>:
	...
   d77fc:	5dc3 000d 5db9 000d 5daf 000d 5da5 000d     .]...]...]...]..
   d780c:	5d99 000d 5d8d 000d 691d 000d 6925 000d     .]...]...i..%i..
   d781c:	5d81 000d 5d79 000d 5d6f 000d 5d65 000d     .]..y]..o]..e]..
   d782c:	6955 000d                                   Ui..

000d7830 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7830:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d7840:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7850:	7361 7463 6d69 0065                         asctime.

000d7858 <_ZTV9IPAddress>:
	...
   d7860:	6481 000d 6471 000d 6473 000d               .d..qd..sd..

000d786c <_ZTV9USBSerial>:
	...
   d7874:	6561 000d 65c9 000d 659f 000d 61c5 000d     ae...e...e...a..
   d7884:	6591 000d 6563 000d 6573 000d 65c3 000d     .e..ce..se...e..
   d7894:	6583 000d 655d 000d                         .e..]e..

000d789c <_ZTV11USARTSerial>:
	...
   d78a4:	666d 000d 66d9 000d 66b1 000d 61c5 000d     mf...f...f...a..
   d78b4:	6681 000d 669d 000d 668f 000d 66ab 000d     .f...f...f...f..
   d78c4:	666f 000d 6673 000d                         of..sf..

000d78cc <_ZTV7TwoWire>:
	...
   d78d4:	6769 000d 67b3 000d 678b 000d 676b 000d     ig...g...g..kg..
   d78e4:	6793 000d 679b 000d 67a3 000d 67ab 000d     .g...g...g...g..

000d78f4 <_ZTVN5spark9WiFiClassE>:
	...
   d78fc:	68bf 000d 68b5 000d 68ab 000d 686d 000d     .h...h...h..mh..
   d790c:	62ed 000d 689f 000d 691d 000d 6925 000d     .b...h...i..%i..
   d791c:	6893 000d 688b 000d 6881 000d 6877 000d     .h...h...h..wh..
   d792c:	6955 000d                                   Ui..

000d7930 <_ZTVN5spark12NetworkClassE>:
	...
   d7938:	68dd 000d 68e7 000d 68f1 000d 68fb 000d     .h...h...h...h..
   d7948:	6905 000d 6911 000d 691d 000d 6925 000d     .i...i...i..%i..
   d7958:	692d 000d 6939 000d 6941 000d 694b 000d     -i..9i..Ai..Ki..
   d7968:	6955 000d                                   Ui..

000d796c <_ZSt7nothrow>:
	...

000d796d <link_const_variable_data_end>:
   d796d:	00          	.byte	0x00
	...

000d7970 <link_constructors_location>:
   d7970:	000d42a5 	.word	0x000d42a5
   d7974:	000d5dcd 	.word	0x000d5dcd
   d7978:	000d5f5d 	.word	0x000d5f5d
   d797c:	000d619d 	.word	0x000d619d
   d7980:	000d62f9 	.word	0x000d62f9
   d7984:	000d6309 	.word	0x000d6309
   d7988:	000d6331 	.word	0x000d6331
   d798c:	000d68c9 	.word	0x000d68c9
   d7990:	000d6a35 	.word	0x000d6a35

000d7994 <link_constructors_end>:
	...
